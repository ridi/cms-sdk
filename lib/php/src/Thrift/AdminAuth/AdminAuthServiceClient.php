<?php
namespace Ridibooks\Cms\Thrift\AdminAuth;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class AdminAuthServiceClient implements \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthServiceIf {
  protected $input_ = null;
  protected $output_ = null;

  protected $seqid_ = 0;

  public function __construct($input, $output=null) {
    $this->input_ = $input;
    $this->output_ = $output ? $output : $input;
  }

  public function hasHashAuth($hash, $checkUrl, $adminId)
  {
    $this->send_hasHashAuth($hash, $checkUrl, $adminId);
    return $this->recv_hasHashAuth();
  }

  public function send_hasHashAuth($hash, $checkUrl, $adminId)
  {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_hasHashAuth_args();
    $args->hash = $hash;
    $args->checkUrl = $checkUrl;
    $args->adminId = $adminId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'hasHashAuth', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('hasHashAuth', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_hasHashAuth()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_hasHashAuth_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_hasHashAuth_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    if ($result->unauthorizedException !== null) {
      throw $result->unauthorizedException;
    }
    throw new \Exception("hasHashAuth failed: unknown result");
  }

  public function getCurrentHashArray($checkUrl, $adminId)
  {
    $this->send_getCurrentHashArray($checkUrl, $adminId);
    return $this->recv_getCurrentHashArray();
  }

  public function send_getCurrentHashArray($checkUrl, $adminId)
  {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getCurrentHashArray_args();
    $args->checkUrl = $checkUrl;
    $args->adminId = $adminId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getCurrentHashArray', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getCurrentHashArray', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getCurrentHashArray()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getCurrentHashArray_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getCurrentHashArray_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("getCurrentHashArray failed: unknown result");
  }

  public function getAdminMenu($adminId)
  {
    $this->send_getAdminMenu($adminId);
    return $this->recv_getAdminMenu();
  }

  public function send_getAdminMenu($adminId)
  {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getAdminMenu_args();
    $args->adminId = $adminId;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'getAdminMenu', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('getAdminMenu', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_getAdminMenu()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getAdminMenu_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getAdminMenu_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->success !== null) {
      return $result->success;
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    throw new \Exception("getAdminMenu failed: unknown result");
  }

  public function authorize($token, array $methods, $check_url)
  {
    $this->send_authorize($token, $methods, $check_url);
    $this->recv_authorize();
  }

  public function send_authorize($token, array $methods, $check_url)
  {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_authorize_args();
    $args->token = $token;
    $args->methods = $methods;
    $args->check_url = $check_url;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'authorize', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('authorize', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_authorize()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_authorize_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_authorize_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    if ($result->noTokenException !== null) {
      throw $result->noTokenException;
    }
    if ($result->malformedTokenException !== null) {
      throw $result->malformedTokenException;
    }
    if ($result->expiredTokenException !== null) {
      throw $result->expiredTokenException;
    }
    if ($result->unauthorizedException !== null) {
      throw $result->unauthorizedException;
    }
    return;
  }

  public function authorizeByTag($token, array $tags)
  {
    $this->send_authorizeByTag($token, $tags);
    $this->recv_authorizeByTag();
  }

  public function send_authorizeByTag($token, array $tags)
  {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_authorizeByTag_args();
    $args->token = $token;
    $args->tags = $tags;
    $bin_accel = ($this->output_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($this->output_, 'authorizeByTag', TMessageType::CALL, $args, $this->seqid_, $this->output_->isStrictWrite());
    }
    else
    {
      $this->output_->writeMessageBegin('authorizeByTag', TMessageType::CALL, $this->seqid_);
      $args->write($this->output_);
      $this->output_->writeMessageEnd();
      $this->output_->getTransport()->flush();
    }
  }

  public function recv_authorizeByTag()
  {
    $bin_accel = ($this->input_ instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_read_binary');
    if ($bin_accel) $result = thrift_protocol_read_binary($this->input_, '\Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_authorizeByTag_result', $this->input_->isStrictRead());
    else
    {
      $rseqid = 0;
      $fname = null;
      $mtype = 0;

      $this->input_->readMessageBegin($fname, $mtype, $rseqid);
      if ($mtype == TMessageType::EXCEPTION) {
        $x = new TApplicationException();
        $x->read($this->input_);
        $this->input_->readMessageEnd();
        throw $x;
      }
      $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_authorizeByTag_result();
      $result->read($this->input_);
      $this->input_->readMessageEnd();
    }
    if ($result->systemException !== null) {
      throw $result->systemException;
    }
    if ($result->noTokenException !== null) {
      throw $result->noTokenException;
    }
    if ($result->malformedTokenException !== null) {
      throw $result->malformedTokenException;
    }
    if ($result->expiredTokenException !== null) {
      throw $result->expiredTokenException;
    }
    if ($result->unauthorizedException !== null) {
      throw $result->unauthorizedException;
    }
    return;
  }

}


