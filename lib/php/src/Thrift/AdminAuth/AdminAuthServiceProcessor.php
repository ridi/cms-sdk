<?php
namespace Ridibooks\Cms\Thrift\AdminAuth;
/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


class AdminAuthServiceProcessor {
  protected $handler_ = null;
  public function __construct($handler) {
    $this->handler_ = $handler;
  }

  public function process($input, $output) {
    $rseqid = 0;
    $fname = null;
    $mtype = 0;

    $input->readMessageBegin($fname, $mtype, $rseqid);
    $methodname = 'process_'.$fname;
    if (!method_exists($this, $methodname)) {
      $input->skip(TType::STRUCT);
      $input->readMessageEnd();
      $x = new TApplicationException('Function '.$fname.' not implemented.', TApplicationException::UNKNOWN_METHOD);
      $output->writeMessageBegin($fname, TMessageType::EXCEPTION, $rseqid);
      $x->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
      return;
    }
    $this->$methodname($rseqid, $input, $output);
    return true;
  }

  protected function process_hasUrlAuth($seqid, $input, $output) {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_hasUrlAuth_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_hasUrlAuth_result();
    try {
      $result->success = $this->handler_->hasUrlAuth($args->method, $args->checkUrl, $args->adminId);
    } catch (\Ridibooks\Cms\Thrift\Errors\SystemException $systemException) {
      $result->systemException = $systemException;
        } catch (\Ridibooks\Cms\Thrift\Errors\UnauthorizedException $unauthorizedException) {
      $result->unauthorizedException = $unauthorizedException;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'hasUrlAuth', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('hasUrlAuth', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_hasHashAuth($seqid, $input, $output) {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_hasHashAuth_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_hasHashAuth_result();
    try {
      $result->success = $this->handler_->hasHashAuth($args->hash, $args->checkUrl, $args->adminId);
    } catch (\Ridibooks\Cms\Thrift\Errors\SystemException $systemException) {
      $result->systemException = $systemException;
        } catch (\Ridibooks\Cms\Thrift\Errors\UnauthorizedException $unauthorizedException) {
      $result->unauthorizedException = $unauthorizedException;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'hasHashAuth', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('hasHashAuth', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getCurrentHashArray($seqid, $input, $output) {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getCurrentHashArray_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getCurrentHashArray_result();
    try {
      $result->success = $this->handler_->getCurrentHashArray($args->checkUrl, $args->adminId);
    } catch (\Ridibooks\Cms\Thrift\Errors\SystemException $systemException) {
      $result->systemException = $systemException;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getCurrentHashArray', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getCurrentHashArray', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_getAdminMenu($seqid, $input, $output) {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getAdminMenu_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_getAdminMenu_result();
    try {
      $result->success = $this->handler_->getAdminMenu($args->adminId);
    } catch (\Ridibooks\Cms\Thrift\Errors\SystemException $systemException) {
      $result->systemException = $systemException;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'getAdminMenu', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('getAdminMenu', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
  protected function process_authorize($seqid, $input, $output) {
    $args = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_authorize_args();
    $args->read($input);
    $input->readMessageEnd();
    $result = new \Ridibooks\Cms\Thrift\AdminAuth\AdminAuthService_authorize_result();
    try {
      $this->handler_->authorize($args->token, $args->method, $args->check_url);
    } catch (\Ridibooks\Cms\Thrift\Errors\SystemException $systemException) {
      $result->systemException = $systemException;
        } catch (\Ridibooks\Cms\Thrift\Errors\NoTokenException $noTokenException) {
      $result->noTokenException = $noTokenException;
        } catch (\Ridibooks\Cms\Thrift\Errors\MalformedTokenException $malformedTokenException) {
      $result->malformedTokenException = $malformedTokenException;
        } catch (\Ridibooks\Cms\Thrift\Errors\ExpiredTokenException $expiredTokenException) {
      $result->expiredTokenException = $expiredTokenException;
        } catch (\Ridibooks\Cms\Thrift\Errors\UnauthorizedException $unauthorizedException) {
      $result->unauthorizedException = $unauthorizedException;
    }
    $bin_accel = ($output instanceof TBinaryProtocolAccelerated) && function_exists('thrift_protocol_write_binary');
    if ($bin_accel)
    {
      thrift_protocol_write_binary($output, 'authorize', TMessageType::REPLY, $result, $seqid, $output->isStrictWrite());
    }
    else
    {
      $output->writeMessageBegin('authorize', TMessageType::REPLY, $seqid);
      $result->write($output);
      $output->writeMessageEnd();
      $output->getTransport()->flush();
    }
  }
}
