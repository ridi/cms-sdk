<?php
namespace Ridibooks\Cms\Thrift\AdminMenu;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
use Thrift\Base\TBase;
use Thrift\Type\TType;
use Thrift\Type\TMessageType;
use Thrift\Exception\TException;
use Thrift\Exception\TProtocolException;
use Thrift\Protocol\TProtocol;
use Thrift\Protocol\TBinaryProtocolAccelerated;
use Thrift\Exception\TApplicationException;


/**
 * AdminMenu 엔티티
 */
class AdminMenu {
  static $_TSPEC;

  /**
   * @var int
   */
  public $id = null;
  /**
   * @var string
   */
  public $menu_title = null;
  /**
   * @var string
   */
  public $menu_url = null;
  /**
   * @var int
   */
  public $menu_deep = null;
  /**
   * @var int
   */
  public $menu_order = null;
  /**
   * @var bool
   */
  public $is_use = null;
  /**
   * @var bool
   */
  public $is_show = null;
  /**
   * @var string
   */
  public $reg_date = null;
  /**
   * @var bool
   */
  public $is_newtab = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'id',
          'type' => TType::I32,
          ),
        2 => array(
          'var' => 'menu_title',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'menu_url',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'menu_deep',
          'type' => TType::I32,
          ),
        5 => array(
          'var' => 'menu_order',
          'type' => TType::I32,
          ),
        6 => array(
          'var' => 'is_use',
          'type' => TType::BOOL,
          ),
        7 => array(
          'var' => 'is_show',
          'type' => TType::BOOL,
          ),
        8 => array(
          'var' => 'reg_date',
          'type' => TType::STRING,
          ),
        9 => array(
          'var' => 'is_newtab',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['id'])) {
        $this->id = $vals['id'];
      }
      if (isset($vals['menu_title'])) {
        $this->menu_title = $vals['menu_title'];
      }
      if (isset($vals['menu_url'])) {
        $this->menu_url = $vals['menu_url'];
      }
      if (isset($vals['menu_deep'])) {
        $this->menu_deep = $vals['menu_deep'];
      }
      if (isset($vals['menu_order'])) {
        $this->menu_order = $vals['menu_order'];
      }
      if (isset($vals['is_use'])) {
        $this->is_use = $vals['is_use'];
      }
      if (isset($vals['is_show'])) {
        $this->is_show = $vals['is_show'];
      }
      if (isset($vals['reg_date'])) {
        $this->reg_date = $vals['reg_date'];
      }
      if (isset($vals['is_newtab'])) {
        $this->is_newtab = $vals['is_newtab'];
      }
    }
  }

  public function getName() {
    return 'AdminMenu';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->id);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->menu_title);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->menu_url);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->menu_deep);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::I32) {
            $xfer += $input->readI32($this->menu_order);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_use);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_show);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 8:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->reg_date);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 9:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->is_newtab);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('AdminMenu');
    if ($this->id !== null) {
      $xfer += $output->writeFieldBegin('id', TType::I32, 1);
      $xfer += $output->writeI32($this->id);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->menu_title !== null) {
      $xfer += $output->writeFieldBegin('menu_title', TType::STRING, 2);
      $xfer += $output->writeString($this->menu_title);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->menu_url !== null) {
      $xfer += $output->writeFieldBegin('menu_url', TType::STRING, 3);
      $xfer += $output->writeString($this->menu_url);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->menu_deep !== null) {
      $xfer += $output->writeFieldBegin('menu_deep', TType::I32, 4);
      $xfer += $output->writeI32($this->menu_deep);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->menu_order !== null) {
      $xfer += $output->writeFieldBegin('menu_order', TType::I32, 5);
      $xfer += $output->writeI32($this->menu_order);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_use !== null) {
      $xfer += $output->writeFieldBegin('is_use', TType::BOOL, 6);
      $xfer += $output->writeBool($this->is_use);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_show !== null) {
      $xfer += $output->writeFieldBegin('is_show', TType::BOOL, 7);
      $xfer += $output->writeBool($this->is_show);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->reg_date !== null) {
      $xfer += $output->writeFieldBegin('reg_date', TType::STRING, 8);
      $xfer += $output->writeString($this->reg_date);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->is_newtab !== null) {
      $xfer += $output->writeFieldBegin('is_newtab', TType::BOOL, 9);
      $xfer += $output->writeBool($this->is_newtab);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

