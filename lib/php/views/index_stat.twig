{% extends 'index_new.twig' %}
{% block title %}
  {{ title }}
{% endblock %}

{% block script %}
  <script type="text/javascript">
    require(['jquery', 'stickyTableHeaders', 'datatables.net'], function ($) {
      $('table.js_datatable').dataTable();
      $('table.js_sticky_table_header').stickyTableHeaders();

      // http://stackoverflow.com/questions/1787322/htmlspecialchars-equivalent-in-javascript
      function escapeHtml(text) {
        var map = {
          '&': '&amp;',
          '<': '&lt;',
          '>': '&gt;',
          '"': '&quot;',
          "'": '&#039;'
        };

        return text.replace(/[&<>"']/g, function (m) {
          return map[m];
        });
      }

      //http://stackoverflow.com/questions/15423870/find-next-table-when-click-in-a-div
      // Temporary delimiter characters unlikely to be typed by keyboard
      // This is to avoid accidentally splitting the actual contents
      function exportTableToCSV($table, filename) {
        var csv;
        var
          tmpColDelim = String.fromCharCode(11), // vertical tab character
          tmpRowDelim = String.fromCharCode(0), // null character

          colDelim = '</td><td>',
          rowDelim = '</td></tr><tr><td>';
        var dicts;

        if ($table.hasClass('js_datatable')) {
          var table_instance = $table.dataTable({"retrieve": true}).api();
          var columns = $.map(table_instance.columns().header(), function (header) {
            return $(header).text();
          });
          var rows = table_instance.rows().data();
          rows.unshift(columns);
          dicts = rows;
        }
        else {
          var $rows = $table.find('tr:has(td)');
          dicts = $rows.map(function (i, row) {
            var $cols = $(row).find('td');
            return $cols.map(function (j, col) {
              var $col = $(col);

              return $col.text();
            });
          });
        }
        console.log(dicts);
        // Grab text from table into CSV formatted string
        csv = '<table><tr><td>' + $.map(dicts, function (dict) {
            return $.map(dict, function (text) {
              return escapeHtml(text).replace('"', '""'); // escape double quotes
            }).join(tmpColDelim);

          }).join(tmpRowDelim)
            .split(tmpRowDelim).join(rowDelim)
            .split(tmpColDelim).join(colDelim) + '</td></tr></table>';

        // Data URI
        var xlsData = 'data:application/xls;charset=utf-8,' + encodeURIComponent(csv);

        $(this)
          .attr({
            'download': filename,
            'href': xlsData,
            'target': '_blank'
          });
      }

      // This must be a hyperlink
      $(".js_export").on('click', function () {
        exportTableToCSV.apply(this, [$(this).parent().find('table'), 'export.xls']);
      });
    })
  </script>
  <script>
    (function (i, s, o, g, r, a, m) {
      i['GoogleAnalyticsObject'] = r;
      i[r] = i[r] || function () {
          (i[r].q = i[r].q || []).push(arguments)
        }, i[r].l = 1 * new Date();
      a = s.createElement(o),
        m = s.getElementsByTagName(o)[0];
      a.async = 1;
      a.src = g;
      m.parentNode.insertBefore(a, m)
    })(window, document, 'script', 'https://www.google-analytics.com/analytics.js', 'ga');

    ga('create', 'UA-10567409-14', 'auto');
    ga('send', 'pageview');
  </script>

{% endblock %}

{% block body %}

  {% for table_name, table in tables %}
    {% if table |length %}
      <div>
        <h3>{{ table_name }}</h3>
        <p>{{ descriptions[table_name] }}</p>
        <table class="table table-striped table-bordered table-condensed js_sticky_table_header js_datatable">
          <thead>
          <tr>
            {% for key, value in (table|first) %}
              <td style="background-color: white">
                {{ key }}
              </td>
            {% endfor %}
          </tr>
          </thead>
          <tbody>
          {% for row in table %}
            <tr>
              {% for key, value in (table|first) %}
                <td style="text-align: right">{{ row[key] }}</td>
              {% endfor %}
            </tr>
          {% endfor %}
          </tbody>
        </table>
        <a href="#" class="js_export">엑셀받기</a>
        <sub style="float:right">{{ query_datetimes[table_name] }}</sub>
      </div>
    {% endif %}
  {% endfor %}

  <button class="btn" onclick="$('#querylog').toggle()">쿼리 보기</button>
  <div style="display:none" id="querylog">
    {% for query_name, querys in querylogs %}
      <div>
        <h2>{{ query_name }}</h2>
        {% for query in querys %}
          <pre>{{ query }}</pre>
        {% endfor %}
      </div>
    {% endfor %}
  </div>

{% endblock %}
