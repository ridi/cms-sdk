{"version":3,"sources":["../../lib/CmsClient/ClientWrapper.js"],"names":["ClientWrapper","serviceName","service","connection","multiplexer","Multiplexer","client","createClient","serviceMethods","Object","getOwnPropertyNames","getPrototypeOf","filter","property","indexOf","forEach","method","prototype","args","callAsync","callSync","methodName","Promise","resolve","reject","err","response"],"mappings":";;;;;;;;AAAA;;;;;;;;;;;;IAEMA,a;AACJ,yBAAYC,WAAZ,EAAyBC,OAAzB,EAAkCC,UAAlC,EAA8C;AAAA;;AAAA;;AAC5C,QAAMC,cAAc,IAAI,iBAAOC,WAAX,EAApB;AACA,SAAKC,MAAL,GAAcF,YAAYG,YAAZ,CAAyBN,WAAzB,EAAsCC,OAAtC,EAA+CC,UAA/C,CAAd;;AAEA,QAAMK,iBAAiBC,OAAOC,mBAAP,CAA2BD,OAAOE,cAAP,CAAsB,KAAKL,MAA3B,CAA3B,EACpBM,MADoB,CACb;AAAA,aACNC,SAASC,OAAT,CAAiB,OAAjB,MAA8B,CAAC,CAA/B,IACKD,SAASC,OAAT,CAAiB,OAAjB,MAA8B,CAAC,CADpC,IAEKD,SAASC,OAAT,CAAiB,OAAjB,MAA8B,CAAC,CAH9B;AAAA,KADa,CAAvB;;AAMAN,mBAAeO,OAAf,CAAuB,UAACC,MAAD,EAAY;AACjChB,oBAAciB,SAAd,CAA2BD,MAA3B,cAA4C;AAAA,0CAAIE,IAAJ;AAAIA,cAAJ;AAAA;;AAAA,eAAa,MAAKC,SAAL,eAAeH,MAAf,SAA0BE,IAA1B,EAAb;AAAA,OAA5C;AACAlB,oBAAciB,SAAd,CAAwBD,MAAxB,IAAkC;AAAA,2CAAIE,IAAJ;AAAIA,cAAJ;AAAA;;AAAA,eAAa,MAAKE,QAAL,eAAcJ,MAAd,SAAyBE,IAAzB,EAAb;AAAA,OAAlC;AACD,KAHD;AAID;;;;;0FAEeG,U;;;2CAAeH,I;AAAAA,c;;;;;;;iDACtB,IAAII,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AAAA;;AACtC,oCAAKlB,MAAL,EAAYe,UAAZ,oCAA2BH,IAA3B,UAAiC,UAACO,GAAD,EAAMC,QAAN,EAAmB;AAClD,wBAAID,GAAJ,EAAS;AACPD,6BAAOC,GAAP;AACA;AACD;;AAEDF,4BAAQG,QAAR;AACD,mBAPD;AAQD,iBATM,C;;;;;;;;;;;;;;;;;;6BAYAL,U,EAAqB;AAAA;;AAAA,yCAANH,IAAM;AAANA,YAAM;AAAA;;AAC5B,aAAO,iBAAKZ,MAAL,EAAYe,UAAZ,kBAA2BH,IAA3B,CAAP;AACD;;;;;;kBAGYlB,a","file":"ClientWrapper.js","sourcesContent":["import thrift from 'thrift';\n\nclass ClientWrapper {\n  constructor(serviceName, service, connection) {\n    const multiplexer = new thrift.Multiplexer();\n    this.client = multiplexer.createClient(serviceName, service, connection);\n\n    const serviceMethods = Object.getOwnPropertyNames(Object.getPrototypeOf(this.client))\n      .filter(property =>\n        property.indexOf('seqid') === -1\n          && property.indexOf('send_') === -1\n          && property.indexOf('recv_') === -1);\n\n    serviceMethods.forEach((method) => {\n      ClientWrapper.prototype[`${method}Async`] = (...args) => this.callAsync(method, ...args);\n      ClientWrapper.prototype[method] = (...args) => this.callSync(method, ...args);\n    });\n  }\n\n  async callAsync(methodName, ...args) {\n    return new Promise((resolve, reject) => {\n      this.client[methodName](...args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  }\n\n  callSync(methodName, ...args) {\n    return this.client[methodName](...args);\n  }\n}\n\nexport default ClientWrapper;\n"]}