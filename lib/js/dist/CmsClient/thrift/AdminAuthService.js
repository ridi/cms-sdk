//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Errors_ttypes = require('./Errors_types');

var ttypes = require('./AdminAuth_types');
//HELPER FUNCTIONS AND STRUCTURES

var AdminAuthService_hasHashAuth_args = function AdminAuthService_hasHashAuth_args(args) {
  this.hash = null;
  this.checkUrl = null;
  this.adminId = null;
  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
    if (args.checkUrl !== undefined && args.checkUrl !== null) {
      this.checkUrl = args.checkUrl;
    }
    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};
AdminAuthService_hasHashAuth_args.prototype = {};
AdminAuthService_hasHashAuth_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.hash = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.checkUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.adminId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_hasHashAuth_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_hasHashAuth_args');
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeString(this.hash);
    output.writeFieldEnd();
  }
  if (this.checkUrl !== null && this.checkUrl !== undefined) {
    output.writeFieldBegin('checkUrl', Thrift.Type.STRING, 2);
    output.writeString(this.checkUrl);
    output.writeFieldEnd();
  }
  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 3);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_hasHashAuth_result = function AdminAuthService_hasHashAuth_result(args) {
  this.success = null;
  this.systemException = null;
  this.unauthorizedException = null;
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.UnauthorizedException) {
    this.unauthorizedException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.unauthorizedException !== undefined && args.unauthorizedException !== null) {
      this.unauthorizedException = args.unauthorizedException;
    }
  }
};
AdminAuthService_hasHashAuth_result.prototype = {};
AdminAuthService_hasHashAuth_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.unauthorizedException = new Errors_ttypes.UnauthorizedException();
          this.unauthorizedException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_hasHashAuth_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_hasHashAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorizedException !== null && this.unauthorizedException !== undefined) {
    output.writeFieldBegin('unauthorizedException', Thrift.Type.STRUCT, 2);
    this.unauthorizedException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getCurrentHashArray_args = function AdminAuthService_getCurrentHashArray_args(args) {
  this.checkUrl = null;
  this.adminId = null;
  if (args) {
    if (args.checkUrl !== undefined && args.checkUrl !== null) {
      this.checkUrl = args.checkUrl;
    }
    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};
AdminAuthService_getCurrentHashArray_args.prototype = {};
AdminAuthService_getCurrentHashArray_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.checkUrl = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.adminId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_getCurrentHashArray_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_getCurrentHashArray_args');
  if (this.checkUrl !== null && this.checkUrl !== undefined) {
    output.writeFieldBegin('checkUrl', Thrift.Type.STRING, 1);
    output.writeString(this.checkUrl);
    output.writeFieldEnd();
  }
  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 2);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getCurrentHashArray_result = function AdminAuthService_getCurrentHashArray_result(args) {
  this.success = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminAuthService_getCurrentHashArray_result.prototype = {};
AdminAuthService_getCurrentHashArray_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size0 = 0;
          var _rtmp34;
          this.success = [];
          var _etype3 = 0;
          _rtmp34 = input.readListBegin();
          _etype3 = _rtmp34.etype;
          _size0 = _rtmp34.size;
          for (var _i5 = 0; _i5 < _size0; ++_i5) {
            var elem6 = null;
            elem6 = input.readString();
            this.success.push(elem6);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_getCurrentHashArray_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_getCurrentHashArray_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter7 in this.success) {
      if (this.success.hasOwnProperty(iter7)) {
        iter7 = this.success[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getAdminMenu_args = function AdminAuthService_getAdminMenu_args(args) {
  this.adminId = null;
  if (args) {
    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};
AdminAuthService_getAdminMenu_args.prototype = {};
AdminAuthService_getAdminMenu_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.adminId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_getAdminMenu_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_getAdminMenu_args');
  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 1);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getAdminMenu_result = function AdminAuthService_getAdminMenu_result(args) {
  this.success = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminAuthService_getAdminMenu_result.prototype = {};
AdminAuthService_getAdminMenu_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size8 = 0;
          var _rtmp312;
          this.success = [];
          var _etype11 = 0;
          _rtmp312 = input.readListBegin();
          _etype11 = _rtmp312.etype;
          _size8 = _rtmp312.size;
          for (var _i13 = 0; _i13 < _size8; ++_i13) {
            var elem14 = null;
            elem14 = new ttypes.AdminMenu();
            elem14.read(input);
            this.success.push(elem14);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_getAdminMenu_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_getAdminMenu_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success) {
      if (this.success.hasOwnProperty(iter15)) {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorize_args = function AdminAuthService_authorize_args(args) {
  this.token = null;
  this.methods = null;
  this.check_url = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.methods !== undefined && args.methods !== null) {
      this.methods = Thrift.copyList(args.methods, [null]);
    }
    if (args.check_url !== undefined && args.check_url !== null) {
      this.check_url = args.check_url;
    }
  }
};
AdminAuthService_authorize_args.prototype = {};
AdminAuthService_authorize_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size16 = 0;
          var _rtmp320;
          this.methods = [];
          var _etype19 = 0;
          _rtmp320 = input.readListBegin();
          _etype19 = _rtmp320.etype;
          _size16 = _rtmp320.size;
          for (var _i21 = 0; _i21 < _size16; ++_i21) {
            var elem22 = null;
            elem22 = input.readString();
            this.methods.push(elem22);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.check_url = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_authorize_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorize_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.methods !== null && this.methods !== undefined) {
    output.writeFieldBegin('methods', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.methods.length);
    for (var iter23 in this.methods) {
      if (this.methods.hasOwnProperty(iter23)) {
        iter23 = this.methods[iter23];
        output.writeString(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.check_url !== null && this.check_url !== undefined) {
    output.writeFieldBegin('check_url', Thrift.Type.STRING, 3);
    output.writeString(this.check_url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorize_result = function AdminAuthService_authorize_result(args) {
  this.systemException = null;
  this.noTokenException = null;
  this.malformedTokenException = null;
  this.expiredTokenException = null;
  this.unauthorizedException = null;
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.NoTokenException) {
    this.noTokenException = args;
    return;
  }
  if (args instanceof Errors_ttypes.MalformedTokenException) {
    this.malformedTokenException = args;
    return;
  }
  if (args instanceof Errors_ttypes.ExpiredTokenException) {
    this.expiredTokenException = args;
    return;
  }
  if (args instanceof Errors_ttypes.UnauthorizedException) {
    this.unauthorizedException = args;
    return;
  }
  if (args) {
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.noTokenException !== undefined && args.noTokenException !== null) {
      this.noTokenException = args.noTokenException;
    }
    if (args.malformedTokenException !== undefined && args.malformedTokenException !== null) {
      this.malformedTokenException = args.malformedTokenException;
    }
    if (args.expiredTokenException !== undefined && args.expiredTokenException !== null) {
      this.expiredTokenException = args.expiredTokenException;
    }
    if (args.unauthorizedException !== undefined && args.unauthorizedException !== null) {
      this.unauthorizedException = args.unauthorizedException;
    }
  }
};
AdminAuthService_authorize_result.prototype = {};
AdminAuthService_authorize_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.noTokenException = new Errors_ttypes.NoTokenException();
          this.noTokenException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.malformedTokenException = new Errors_ttypes.MalformedTokenException();
          this.malformedTokenException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.expiredTokenException = new Errors_ttypes.ExpiredTokenException();
          this.expiredTokenException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.unauthorizedException = new Errors_ttypes.UnauthorizedException();
          this.unauthorizedException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_authorize_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorize_result');
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.noTokenException !== null && this.noTokenException !== undefined) {
    output.writeFieldBegin('noTokenException', Thrift.Type.STRUCT, 2);
    this.noTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.malformedTokenException !== null && this.malformedTokenException !== undefined) {
    output.writeFieldBegin('malformedTokenException', Thrift.Type.STRUCT, 3);
    this.malformedTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.expiredTokenException !== null && this.expiredTokenException !== undefined) {
    output.writeFieldBegin('expiredTokenException', Thrift.Type.STRUCT, 4);
    this.expiredTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorizedException !== null && this.unauthorizedException !== undefined) {
    output.writeFieldBegin('unauthorizedException', Thrift.Type.STRUCT, 5);
    this.unauthorizedException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorizeByTag_args = function AdminAuthService_authorizeByTag_args(args) {
  this.token = null;
  this.tags = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
  }
};
AdminAuthService_authorizeByTag_args.prototype = {};
AdminAuthService_authorizeByTag_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.LIST) {
          var _size24 = 0;
          var _rtmp328;
          this.tags = [];
          var _etype27 = 0;
          _rtmp328 = input.readListBegin();
          _etype27 = _rtmp328.etype;
          _size24 = _rtmp328.size;
          for (var _i29 = 0; _i29 < _size24; ++_i29) {
            var elem30 = null;
            elem30 = input.readString();
            this.tags.push(elem30);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_authorizeByTag_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorizeByTag_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);
    for (var iter31 in this.tags) {
      if (this.tags.hasOwnProperty(iter31)) {
        iter31 = this.tags[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorizeByTag_result = function AdminAuthService_authorizeByTag_result(args) {
  this.systemException = null;
  this.noTokenException = null;
  this.malformedTokenException = null;
  this.expiredTokenException = null;
  this.unauthorizedException = null;
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args instanceof Errors_ttypes.NoTokenException) {
    this.noTokenException = args;
    return;
  }
  if (args instanceof Errors_ttypes.MalformedTokenException) {
    this.malformedTokenException = args;
    return;
  }
  if (args instanceof Errors_ttypes.ExpiredTokenException) {
    this.expiredTokenException = args;
    return;
  }
  if (args instanceof Errors_ttypes.UnauthorizedException) {
    this.unauthorizedException = args;
    return;
  }
  if (args) {
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
    if (args.noTokenException !== undefined && args.noTokenException !== null) {
      this.noTokenException = args.noTokenException;
    }
    if (args.malformedTokenException !== undefined && args.malformedTokenException !== null) {
      this.malformedTokenException = args.malformedTokenException;
    }
    if (args.expiredTokenException !== undefined && args.expiredTokenException !== null) {
      this.expiredTokenException = args.expiredTokenException;
    }
    if (args.unauthorizedException !== undefined && args.unauthorizedException !== null) {
      this.unauthorizedException = args.unauthorizedException;
    }
  }
};
AdminAuthService_authorizeByTag_result.prototype = {};
AdminAuthService_authorizeByTag_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.noTokenException = new Errors_ttypes.NoTokenException();
          this.noTokenException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.malformedTokenException = new Errors_ttypes.MalformedTokenException();
          this.malformedTokenException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.expiredTokenException = new Errors_ttypes.ExpiredTokenException();
          this.expiredTokenException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.unauthorizedException = new Errors_ttypes.UnauthorizedException();
          this.unauthorizedException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_authorizeByTag_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorizeByTag_result');
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  if (this.noTokenException !== null && this.noTokenException !== undefined) {
    output.writeFieldBegin('noTokenException', Thrift.Type.STRUCT, 2);
    this.noTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.malformedTokenException !== null && this.malformedTokenException !== undefined) {
    output.writeFieldBegin('malformedTokenException', Thrift.Type.STRUCT, 3);
    this.malformedTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.expiredTokenException !== null && this.expiredTokenException !== undefined) {
    output.writeFieldBegin('expiredTokenException', Thrift.Type.STRUCT, 4);
    this.expiredTokenException.write(output);
    output.writeFieldEnd();
  }
  if (this.unauthorizedException !== null && this.unauthorizedException !== undefined) {
    output.writeFieldBegin('unauthorizedException', Thrift.Type.STRUCT, 5);
    this.unauthorizedException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthServiceClient = exports.Client = function (output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
AdminAuthServiceClient.prototype = {};
AdminAuthServiceClient.prototype.seqid = function () {
  return this._seqid;
};
AdminAuthServiceClient.prototype.new_seqid = function () {
  return this._seqid += 1;
};
AdminAuthServiceClient.prototype.hasHashAuth = function (hash, checkUrl, adminId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hasHashAuth(hash, checkUrl, adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hasHashAuth(hash, checkUrl, adminId);
  }
};

AdminAuthServiceClient.prototype.send_hasHashAuth = function (hash, checkUrl, adminId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hasHashAuth', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminAuthService_hasHashAuth_args();
  args.hash = hash;
  args.checkUrl = checkUrl;
  args.adminId = adminId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminAuthServiceClient.prototype.recv_hasHashAuth = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminAuthService_hasHashAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.unauthorizedException) {
    return callback(result.unauthorizedException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasHashAuth failed: unknown result');
};
AdminAuthServiceClient.prototype.getCurrentHashArray = function (checkUrl, adminId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCurrentHashArray(checkUrl, adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCurrentHashArray(checkUrl, adminId);
  }
};

AdminAuthServiceClient.prototype.send_getCurrentHashArray = function (checkUrl, adminId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCurrentHashArray', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminAuthService_getCurrentHashArray_args();
  args.checkUrl = checkUrl;
  args.adminId = adminId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminAuthServiceClient.prototype.recv_getCurrentHashArray = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminAuthService_getCurrentHashArray_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCurrentHashArray failed: unknown result');
};
AdminAuthServiceClient.prototype.getAdminMenu = function (adminId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAdminMenu(adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminMenu(adminId);
  }
};

AdminAuthServiceClient.prototype.send_getAdminMenu = function (adminId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAdminMenu', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminAuthService_getAdminMenu_args();
  args.adminId = adminId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminAuthServiceClient.prototype.recv_getAdminMenu = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminAuthService_getAdminMenu_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAdminMenu failed: unknown result');
};
AdminAuthServiceClient.prototype.authorize = function (token, methods, check_url, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_authorize(token, methods, check_url);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authorize(token, methods, check_url);
  }
};

AdminAuthServiceClient.prototype.send_authorize = function (token, methods, check_url) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authorize', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminAuthService_authorize_args();
  args.token = token;
  args.methods = methods;
  args.check_url = check_url;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminAuthServiceClient.prototype.recv_authorize = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminAuthService_authorize_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.noTokenException) {
    return callback(result.noTokenException);
  }
  if (null !== result.malformedTokenException) {
    return callback(result.malformedTokenException);
  }
  if (null !== result.expiredTokenException) {
    return callback(result.expiredTokenException);
  }
  if (null !== result.unauthorizedException) {
    return callback(result.unauthorizedException);
  }
  callback(null);
};
AdminAuthServiceClient.prototype.authorizeByTag = function (token, tags, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_authorizeByTag(token, tags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authorizeByTag(token, tags);
  }
};

AdminAuthServiceClient.prototype.send_authorizeByTag = function (token, tags) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('authorizeByTag', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminAuthService_authorizeByTag_args();
  args.token = token;
  args.tags = tags;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminAuthServiceClient.prototype.recv_authorizeByTag = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminAuthService_authorizeByTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.noTokenException) {
    return callback(result.noTokenException);
  }
  if (null !== result.malformedTokenException) {
    return callback(result.malformedTokenException);
  }
  if (null !== result.expiredTokenException) {
    return callback(result.expiredTokenException);
  }
  if (null !== result.unauthorizedException) {
    return callback(result.unauthorizedException);
  }
  callback(null);
};
var AdminAuthServiceProcessor = exports.Processor = function (handler) {
  this._handler = handler;
};
AdminAuthServiceProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
AdminAuthServiceProcessor.prototype.process_hasHashAuth = function (seqid, input, output) {
  var args = new AdminAuthService_hasHashAuth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hasHashAuth.length === 3) {
    Q.fcall(this._handler.hasHashAuth, args.hash, args.checkUrl, args.adminId).then(function (result) {
      var result_obj = new AdminAuthService_hasHashAuth_result({ success: result });
      output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.UnauthorizedException) {
        result = new AdminAuthService_hasHashAuth_result(err);
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.hasHashAuth(args.hash, args.checkUrl, args.adminId, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.UnauthorizedException) {
        result_obj = new AdminAuthService_hasHashAuth_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminAuthServiceProcessor.prototype.process_getCurrentHashArray = function (seqid, input, output) {
  var args = new AdminAuthService_getCurrentHashArray_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCurrentHashArray.length === 2) {
    Q.fcall(this._handler.getCurrentHashArray, args.checkUrl, args.adminId).then(function (result) {
      var result_obj = new AdminAuthService_getCurrentHashArray_result({ success: result });
      output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.SystemException) {
        result = new AdminAuthService_getCurrentHashArray_result(err);
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCurrentHashArray(args.checkUrl, args.adminId, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminAuthService_getCurrentHashArray_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminAuthServiceProcessor.prototype.process_getAdminMenu = function (seqid, input, output) {
  var args = new AdminAuthService_getAdminMenu_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAdminMenu.length === 1) {
    Q.fcall(this._handler.getAdminMenu, args.adminId).then(function (result) {
      var result_obj = new AdminAuthService_getAdminMenu_result({ success: result });
      output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.SystemException) {
        result = new AdminAuthService_getAdminMenu_result(err);
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminMenu(args.adminId, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminAuthService_getAdminMenu_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminAuthServiceProcessor.prototype.process_authorize = function (seqid, input, output) {
  var args = new AdminAuthService_authorize_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.authorize.length === 3) {
    Q.fcall(this._handler.authorize, args.token, args.methods, args.check_url).then(function (result) {
      var result_obj = new AdminAuthService_authorize_result({ success: result });
      output.writeMessageBegin("authorize", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException || err instanceof Errors_ttypes.UnauthorizedException) {
        result = new AdminAuthService_authorize_result(err);
        output.writeMessageBegin("authorize", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorize", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.authorize(args.token, args.methods, args.check_url, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException || err instanceof Errors_ttypes.UnauthorizedException) {
        result_obj = new AdminAuthService_authorize_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("authorize", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorize", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminAuthServiceProcessor.prototype.process_authorizeByTag = function (seqid, input, output) {
  var args = new AdminAuthService_authorizeByTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.authorizeByTag.length === 2) {
    Q.fcall(this._handler.authorizeByTag, args.token, args.tags).then(function (result) {
      var result_obj = new AdminAuthService_authorizeByTag_result({ success: result });
      output.writeMessageBegin("authorizeByTag", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException || err instanceof Errors_ttypes.UnauthorizedException) {
        result = new AdminAuthService_authorizeByTag_result(err);
        output.writeMessageBegin("authorizeByTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizeByTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.authorizeByTag(args.token, args.tags, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException || err instanceof Errors_ttypes.UnauthorizedException) {
        result_obj = new AdminAuthService_authorizeByTag_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("authorizeByTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizeByTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};