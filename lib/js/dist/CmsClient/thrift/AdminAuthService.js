//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');

var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Int64 = require('node-int64');

var Errors_ttypes = require('./Errors_types');

var ttypes = require('./AdminAuth_types'); //HELPER FUNCTIONS AND STRUCTURES


var AdminAuthService_hasHashAuth_args = function (args) {
  this.hash = null;
  this.checkUrl = null;
  this.adminId = null;

  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }

    if (args.checkUrl !== undefined && args.checkUrl !== null) {
      this.checkUrl = args.checkUrl;
    }

    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};

AdminAuthService_hasHashAuth_args.prototype = {};

AdminAuthService_hasHashAuth_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.hash = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.checkUrl = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.adminId = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_hasHashAuth_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_hasHashAuth_args');

  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeString(this.hash);
    output.writeFieldEnd();
  }

  if (this.checkUrl !== null && this.checkUrl !== undefined) {
    output.writeFieldBegin('checkUrl', Thrift.Type.STRING, 2);
    output.writeString(this.checkUrl);
    output.writeFieldEnd();
  }

  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 3);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_hasHashAuth_result = function (args) {
  this.success = null;
  this.systemException = null;
  this.unauthorizedException = null;

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args instanceof Errors_ttypes.UnauthorizedException) {
    this.unauthorizedException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }

    if (args.unauthorizedException !== undefined && args.unauthorizedException !== null) {
      this.unauthorizedException = args.unauthorizedException;
    }
  }
};

AdminAuthService_hasHashAuth_result.prototype = {};

AdminAuthService_hasHashAuth_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.unauthorizedException = new Errors_ttypes.UnauthorizedException();
          this.unauthorizedException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_hasHashAuth_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_hasHashAuth_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  if (this.unauthorizedException !== null && this.unauthorizedException !== undefined) {
    output.writeFieldBegin('unauthorizedException', Thrift.Type.STRUCT, 2);
    this.unauthorizedException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getCurrentHashArray_args = function (args) {
  this.checkUrl = null;
  this.adminId = null;

  if (args) {
    if (args.checkUrl !== undefined && args.checkUrl !== null) {
      this.checkUrl = args.checkUrl;
    }

    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};

AdminAuthService_getCurrentHashArray_args.prototype = {};

AdminAuthService_getCurrentHashArray_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.checkUrl = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.adminId = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_getCurrentHashArray_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_getCurrentHashArray_args');

  if (this.checkUrl !== null && this.checkUrl !== undefined) {
    output.writeFieldBegin('checkUrl', Thrift.Type.STRING, 1);
    output.writeString(this.checkUrl);
    output.writeFieldEnd();
  }

  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 2);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getCurrentHashArray_result = function (args) {
  this.success = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminAuthService_getCurrentHashArray_result.prototype = {};

AdminAuthService_getCurrentHashArray_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp31 = input.readListBegin();

          var _size0 = _rtmp31.size || 0;

          for (var _i2 = 0; _i2 < _size0; ++_i2) {
            var elem3 = null;
            elem3 = input.readString();
            this.success.push(elem3);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_getCurrentHashArray_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_getCurrentHashArray_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);

    for (var iter4 in this.success) {
      if (this.success.hasOwnProperty(iter4)) {
        iter4 = this.success[iter4];
        output.writeString(iter4);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getAdminMenu_args = function (args) {
  this.adminId = null;

  if (args) {
    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};

AdminAuthService_getAdminMenu_args.prototype = {};

AdminAuthService_getAdminMenu_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.adminId = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_getAdminMenu_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_getAdminMenu_args');

  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 1);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getAdminMenu_result = function (args) {
  this.success = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminAuthService_getAdminMenu_result.prototype = {};

AdminAuthService_getAdminMenu_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp36 = input.readListBegin();

          var _size5 = _rtmp36.size || 0;

          for (var _i7 = 0; _i7 < _size5; ++_i7) {
            var elem8 = null;
            elem8 = new ttypes.AdminMenu();
            elem8.read(input);
            this.success.push(elem8);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_getAdminMenu_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_getAdminMenu_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);

    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        iter9.write(output);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorize_args = function (args) {
  this.token = null;
  this.methods = null;
  this.check_url = null;

  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }

    if (args.methods !== undefined && args.methods !== null) {
      this.methods = Thrift.copyList(args.methods, [null]);
    }

    if (args.check_url !== undefined && args.check_url !== null) {
      this.check_url = args.check_url;
    }
  }
};

AdminAuthService_authorize_args.prototype = {};

AdminAuthService_authorize_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.LIST) {
          this.methods = [];

          var _rtmp311 = input.readListBegin();

          var _size10 = _rtmp311.size || 0;

          for (var _i12 = 0; _i12 < _size10; ++_i12) {
            var elem13 = null;
            elem13 = input.readString();
            this.methods.push(elem13);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.check_url = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_authorize_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorize_args');

  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }

  if (this.methods !== null && this.methods !== undefined) {
    output.writeFieldBegin('methods', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.methods.length);

    for (var iter14 in this.methods) {
      if (this.methods.hasOwnProperty(iter14)) {
        iter14 = this.methods[iter14];
        output.writeString(iter14);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.check_url !== null && this.check_url !== undefined) {
    output.writeFieldBegin('check_url', Thrift.Type.STRING, 3);
    output.writeString(this.check_url);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorize_result = function (args) {
  this.systemException = null;
  this.noTokenException = null;
  this.malformedTokenException = null;
  this.expiredTokenException = null;
  this.unauthorizedException = null;

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args instanceof Errors_ttypes.NoTokenException) {
    this.noTokenException = args;
    return;
  }

  if (args instanceof Errors_ttypes.MalformedTokenException) {
    this.malformedTokenException = args;
    return;
  }

  if (args instanceof Errors_ttypes.ExpiredTokenException) {
    this.expiredTokenException = args;
    return;
  }

  if (args instanceof Errors_ttypes.UnauthorizedException) {
    this.unauthorizedException = args;
    return;
  }

  if (args) {
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }

    if (args.noTokenException !== undefined && args.noTokenException !== null) {
      this.noTokenException = args.noTokenException;
    }

    if (args.malformedTokenException !== undefined && args.malformedTokenException !== null) {
      this.malformedTokenException = args.malformedTokenException;
    }

    if (args.expiredTokenException !== undefined && args.expiredTokenException !== null) {
      this.expiredTokenException = args.expiredTokenException;
    }

    if (args.unauthorizedException !== undefined && args.unauthorizedException !== null) {
      this.unauthorizedException = args.unauthorizedException;
    }
  }
};

AdminAuthService_authorize_result.prototype = {};

AdminAuthService_authorize_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.noTokenException = new Errors_ttypes.NoTokenException();
          this.noTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.malformedTokenException = new Errors_ttypes.MalformedTokenException();
          this.malformedTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.expiredTokenException = new Errors_ttypes.ExpiredTokenException();
          this.expiredTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.unauthorizedException = new Errors_ttypes.UnauthorizedException();
          this.unauthorizedException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_authorize_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorize_result');

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  if (this.noTokenException !== null && this.noTokenException !== undefined) {
    output.writeFieldBegin('noTokenException', Thrift.Type.STRUCT, 2);
    this.noTokenException.write(output);
    output.writeFieldEnd();
  }

  if (this.malformedTokenException !== null && this.malformedTokenException !== undefined) {
    output.writeFieldBegin('malformedTokenException', Thrift.Type.STRUCT, 3);
    this.malformedTokenException.write(output);
    output.writeFieldEnd();
  }

  if (this.expiredTokenException !== null && this.expiredTokenException !== undefined) {
    output.writeFieldBegin('expiredTokenException', Thrift.Type.STRUCT, 4);
    this.expiredTokenException.write(output);
    output.writeFieldEnd();
  }

  if (this.unauthorizedException !== null && this.unauthorizedException !== undefined) {
    output.writeFieldBegin('unauthorizedException', Thrift.Type.STRUCT, 5);
    this.unauthorizedException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorizeByTag_args = function (args) {
  this.token = null;
  this.tags = null;

  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }

    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
  }
};

AdminAuthService_authorizeByTag_args.prototype = {};

AdminAuthService_authorizeByTag_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.LIST) {
          this.tags = [];

          var _rtmp316 = input.readListBegin();

          var _size15 = _rtmp316.size || 0;

          for (var _i17 = 0; _i17 < _size15; ++_i17) {
            var elem18 = null;
            elem18 = input.readString();
            this.tags.push(elem18);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_authorizeByTag_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorizeByTag_args');

  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }

  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);

    for (var iter19 in this.tags) {
      if (this.tags.hasOwnProperty(iter19)) {
        iter19 = this.tags[iter19];
        output.writeString(iter19);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorizeByTag_result = function (args) {
  this.systemException = null;
  this.noTokenException = null;
  this.malformedTokenException = null;
  this.expiredTokenException = null;
  this.unauthorizedException = null;

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args instanceof Errors_ttypes.NoTokenException) {
    this.noTokenException = args;
    return;
  }

  if (args instanceof Errors_ttypes.MalformedTokenException) {
    this.malformedTokenException = args;
    return;
  }

  if (args instanceof Errors_ttypes.ExpiredTokenException) {
    this.expiredTokenException = args;
    return;
  }

  if (args instanceof Errors_ttypes.UnauthorizedException) {
    this.unauthorizedException = args;
    return;
  }

  if (args) {
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }

    if (args.noTokenException !== undefined && args.noTokenException !== null) {
      this.noTokenException = args.noTokenException;
    }

    if (args.malformedTokenException !== undefined && args.malformedTokenException !== null) {
      this.malformedTokenException = args.malformedTokenException;
    }

    if (args.expiredTokenException !== undefined && args.expiredTokenException !== null) {
      this.expiredTokenException = args.expiredTokenException;
    }

    if (args.unauthorizedException !== undefined && args.unauthorizedException !== null) {
      this.unauthorizedException = args.unauthorizedException;
    }
  }
};

AdminAuthService_authorizeByTag_result.prototype = {};

AdminAuthService_authorizeByTag_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.noTokenException = new Errors_ttypes.NoTokenException();
          this.noTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.malformedTokenException = new Errors_ttypes.MalformedTokenException();
          this.malformedTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.expiredTokenException = new Errors_ttypes.ExpiredTokenException();
          this.expiredTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 5:
        if (ftype == Thrift.Type.STRUCT) {
          this.unauthorizedException = new Errors_ttypes.UnauthorizedException();
          this.unauthorizedException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_authorizeByTag_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorizeByTag_result');

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  if (this.noTokenException !== null && this.noTokenException !== undefined) {
    output.writeFieldBegin('noTokenException', Thrift.Type.STRUCT, 2);
    this.noTokenException.write(output);
    output.writeFieldEnd();
  }

  if (this.malformedTokenException !== null && this.malformedTokenException !== undefined) {
    output.writeFieldBegin('malformedTokenException', Thrift.Type.STRUCT, 3);
    this.malformedTokenException.write(output);
    output.writeFieldEnd();
  }

  if (this.expiredTokenException !== null && this.expiredTokenException !== undefined) {
    output.writeFieldBegin('expiredTokenException', Thrift.Type.STRUCT, 4);
    this.expiredTokenException.write(output);
    output.writeFieldEnd();
  }

  if (this.unauthorizedException !== null && this.unauthorizedException !== undefined) {
    output.writeFieldBegin('unauthorizedException', Thrift.Type.STRUCT, 5);
    this.unauthorizedException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorizeAdminByTag_args = function (args) {
  this.admin_id = null;
  this.tags = null;

  if (args) {
    if (args.admin_id !== undefined && args.admin_id !== null) {
      this.admin_id = args.admin_id;
    }

    if (args.tags !== undefined && args.tags !== null) {
      this.tags = Thrift.copyList(args.tags, [null]);
    }
  }
};

AdminAuthService_authorizeAdminByTag_args.prototype = {};

AdminAuthService_authorizeAdminByTag_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.admin_id = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.LIST) {
          this.tags = [];

          var _rtmp321 = input.readListBegin();

          var _size20 = _rtmp321.size || 0;

          for (var _i22 = 0; _i22 < _size20; ++_i22) {
            var elem23 = null;
            elem23 = input.readString();
            this.tags.push(elem23);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_authorizeAdminByTag_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorizeAdminByTag_args');

  if (this.admin_id !== null && this.admin_id !== undefined) {
    output.writeFieldBegin('admin_id', Thrift.Type.STRING, 1);
    output.writeString(this.admin_id);
    output.writeFieldEnd();
  }

  if (this.tags !== null && this.tags !== undefined) {
    output.writeFieldBegin('tags', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.tags.length);

    for (var iter24 in this.tags) {
      if (this.tags.hasOwnProperty(iter24)) {
        iter24 = this.tags[iter24];
        output.writeString(iter24);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorizeAdminByTag_result = function (args) {
  this.systemException = null;
  this.unauthorizedException = null;

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args instanceof Errors_ttypes.UnauthorizedException) {
    this.unauthorizedException = args;
    return;
  }

  if (args) {
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }

    if (args.unauthorizedException !== undefined && args.unauthorizedException !== null) {
      this.unauthorizedException = args.unauthorizedException;
    }
  }
};

AdminAuthService_authorizeAdminByTag_result.prototype = {};

AdminAuthService_authorizeAdminByTag_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.unauthorizedException = new Errors_ttypes.UnauthorizedException();
          this.unauthorizedException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_authorizeAdminByTag_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorizeAdminByTag_result');

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  if (this.unauthorizedException !== null && this.unauthorizedException !== undefined) {
    output.writeFieldBegin('unauthorizedException', Thrift.Type.STRUCT, 2);
    this.unauthorizedException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorizeAdminByUrl_args = function (args) {
  this.admin_id = null;
  this.check_url = null;

  if (args) {
    if (args.admin_id !== undefined && args.admin_id !== null) {
      this.admin_id = args.admin_id;
    }

    if (args.check_url !== undefined && args.check_url !== null) {
      this.check_url = args.check_url;
    }
  }
};

AdminAuthService_authorizeAdminByUrl_args.prototype = {};

AdminAuthService_authorizeAdminByUrl_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.admin_id = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.check_url = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_authorizeAdminByUrl_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorizeAdminByUrl_args');

  if (this.admin_id !== null && this.admin_id !== undefined) {
    output.writeFieldBegin('admin_id', Thrift.Type.STRING, 1);
    output.writeString(this.admin_id);
    output.writeFieldEnd();
  }

  if (this.check_url !== null && this.check_url !== undefined) {
    output.writeFieldBegin('check_url', Thrift.Type.STRING, 2);
    output.writeString(this.check_url);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_authorizeAdminByUrl_result = function (args) {
  this.systemException = null;
  this.unauthorizedException = null;

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args instanceof Errors_ttypes.UnauthorizedException) {
    this.unauthorizedException = args;
    return;
  }

  if (args) {
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }

    if (args.unauthorizedException !== undefined && args.unauthorizedException !== null) {
      this.unauthorizedException = args.unauthorizedException;
    }
  }
};

AdminAuthService_authorizeAdminByUrl_result.prototype = {};

AdminAuthService_authorizeAdminByUrl_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.unauthorizedException = new Errors_ttypes.UnauthorizedException();
          this.unauthorizedException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_authorizeAdminByUrl_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_authorizeAdminByUrl_result');

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  if (this.unauthorizedException !== null && this.unauthorizedException !== undefined) {
    output.writeFieldBegin('unauthorizedException', Thrift.Type.STRUCT, 2);
    this.unauthorizedException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_introspectToken_args = function (args) {
  this.token = null;

  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};

AdminAuthService_introspectToken_args.prototype = {};

AdminAuthService_introspectToken_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.token = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_introspectToken_args.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_introspectToken_args');

  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_introspectToken_result = function (args) {
  this.success = null;
  this.systemException = null;
  this.noTokenException = null;
  this.malformedTokenException = null;
  this.expiredTokenException = null;

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args instanceof Errors_ttypes.NoTokenException) {
    this.noTokenException = args;
    return;
  }

  if (args instanceof Errors_ttypes.MalformedTokenException) {
    this.malformedTokenException = args;
    return;
  }

  if (args instanceof Errors_ttypes.ExpiredTokenException) {
    this.expiredTokenException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.TokenClaim(args.success);
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }

    if (args.noTokenException !== undefined && args.noTokenException !== null) {
      this.noTokenException = args.noTokenException;
    }

    if (args.malformedTokenException !== undefined && args.malformedTokenException !== null) {
      this.malformedTokenException = args.malformedTokenException;
    }

    if (args.expiredTokenException !== undefined && args.expiredTokenException !== null) {
      this.expiredTokenException = args.expiredTokenException;
    }
  }
};

AdminAuthService_introspectToken_result.prototype = {};

AdminAuthService_introspectToken_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.TokenClaim();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.noTokenException = new Errors_ttypes.NoTokenException();
          this.noTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 3:
        if (ftype == Thrift.Type.STRUCT) {
          this.malformedTokenException = new Errors_ttypes.MalformedTokenException();
          this.malformedTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 4:
        if (ftype == Thrift.Type.STRUCT) {
          this.expiredTokenException = new Errors_ttypes.ExpiredTokenException();
          this.expiredTokenException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminAuthService_introspectToken_result.prototype.write = function (output) {
  output.writeStructBegin('AdminAuthService_introspectToken_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 1);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  if (this.noTokenException !== null && this.noTokenException !== undefined) {
    output.writeFieldBegin('noTokenException', Thrift.Type.STRUCT, 2);
    this.noTokenException.write(output);
    output.writeFieldEnd();
  }

  if (this.malformedTokenException !== null && this.malformedTokenException !== undefined) {
    output.writeFieldBegin('malformedTokenException', Thrift.Type.STRUCT, 3);
    this.malformedTokenException.write(output);
    output.writeFieldEnd();
  }

  if (this.expiredTokenException !== null && this.expiredTokenException !== undefined) {
    output.writeFieldBegin('expiredTokenException', Thrift.Type.STRUCT, 4);
    this.expiredTokenException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthServiceClient = exports.Client = function (output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};

AdminAuthServiceClient.prototype = {};

AdminAuthServiceClient.prototype.seqid = function () {
  return this._seqid;
};

AdminAuthServiceClient.prototype.new_seqid = function () {
  return this._seqid += 1;
};

AdminAuthServiceClient.prototype.hasHashAuth = function (hash, checkUrl, adminId, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_hasHashAuth(hash, checkUrl, adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hasHashAuth(hash, checkUrl, adminId);
  }
};

AdminAuthServiceClient.prototype.send_hasHashAuth = function (hash, checkUrl, adminId) {
  var output = new this.pClass(this.output);
  var params = {
    hash: hash,
    checkUrl: checkUrl,
    adminId: adminId
  };
  var args = new AdminAuthService_hasHashAuth_args(params);

  try {
    output.writeMessageBegin('hasHashAuth', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminAuthServiceClient.prototype.recv_hasHashAuth = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminAuthService_hasHashAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.unauthorizedException) {
    return callback(result.unauthorizedException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('hasHashAuth failed: unknown result');
};

AdminAuthServiceClient.prototype.getCurrentHashArray = function (checkUrl, adminId, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getCurrentHashArray(checkUrl, adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCurrentHashArray(checkUrl, adminId);
  }
};

AdminAuthServiceClient.prototype.send_getCurrentHashArray = function (checkUrl, adminId) {
  var output = new this.pClass(this.output);
  var params = {
    checkUrl: checkUrl,
    adminId: adminId
  };
  var args = new AdminAuthService_getCurrentHashArray_args(params);

  try {
    output.writeMessageBegin('getCurrentHashArray', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminAuthServiceClient.prototype.recv_getCurrentHashArray = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminAuthService_getCurrentHashArray_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getCurrentHashArray failed: unknown result');
};

AdminAuthServiceClient.prototype.getAdminMenu = function (adminId, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAdminMenu(adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminMenu(adminId);
  }
};

AdminAuthServiceClient.prototype.send_getAdminMenu = function (adminId) {
  var output = new this.pClass(this.output);
  var params = {
    adminId: adminId
  };
  var args = new AdminAuthService_getAdminMenu_args(params);

  try {
    output.writeMessageBegin('getAdminMenu', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminAuthServiceClient.prototype.recv_getAdminMenu = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminAuthService_getAdminMenu_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAdminMenu failed: unknown result');
};

AdminAuthServiceClient.prototype.authorize = function (token, methods, check_url, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_authorize(token, methods, check_url);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authorize(token, methods, check_url);
  }
};

AdminAuthServiceClient.prototype.send_authorize = function (token, methods, check_url) {
  var output = new this.pClass(this.output);
  var params = {
    token: token,
    methods: methods,
    check_url: check_url
  };
  var args = new AdminAuthService_authorize_args(params);

  try {
    output.writeMessageBegin('authorize', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminAuthServiceClient.prototype.recv_authorize = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminAuthService_authorize_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.noTokenException) {
    return callback(result.noTokenException);
  }

  if (null !== result.malformedTokenException) {
    return callback(result.malformedTokenException);
  }

  if (null !== result.expiredTokenException) {
    return callback(result.expiredTokenException);
  }

  if (null !== result.unauthorizedException) {
    return callback(result.unauthorizedException);
  }

  callback(null);
};

AdminAuthServiceClient.prototype.authorizeByTag = function (token, tags, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_authorizeByTag(token, tags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authorizeByTag(token, tags);
  }
};

AdminAuthServiceClient.prototype.send_authorizeByTag = function (token, tags) {
  var output = new this.pClass(this.output);
  var params = {
    token: token,
    tags: tags
  };
  var args = new AdminAuthService_authorizeByTag_args(params);

  try {
    output.writeMessageBegin('authorizeByTag', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminAuthServiceClient.prototype.recv_authorizeByTag = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminAuthService_authorizeByTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.noTokenException) {
    return callback(result.noTokenException);
  }

  if (null !== result.malformedTokenException) {
    return callback(result.malformedTokenException);
  }

  if (null !== result.expiredTokenException) {
    return callback(result.expiredTokenException);
  }

  if (null !== result.unauthorizedException) {
    return callback(result.unauthorizedException);
  }

  callback(null);
};

AdminAuthServiceClient.prototype.authorizeAdminByTag = function (admin_id, tags, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_authorizeAdminByTag(admin_id, tags);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authorizeAdminByTag(admin_id, tags);
  }
};

AdminAuthServiceClient.prototype.send_authorizeAdminByTag = function (admin_id, tags) {
  var output = new this.pClass(this.output);
  var params = {
    admin_id: admin_id,
    tags: tags
  };
  var args = new AdminAuthService_authorizeAdminByTag_args(params);

  try {
    output.writeMessageBegin('authorizeAdminByTag', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminAuthServiceClient.prototype.recv_authorizeAdminByTag = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminAuthService_authorizeAdminByTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.unauthorizedException) {
    return callback(result.unauthorizedException);
  }

  callback(null);
};

AdminAuthServiceClient.prototype.authorizeAdminByUrl = function (admin_id, check_url, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_authorizeAdminByUrl(admin_id, check_url);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_authorizeAdminByUrl(admin_id, check_url);
  }
};

AdminAuthServiceClient.prototype.send_authorizeAdminByUrl = function (admin_id, check_url) {
  var output = new this.pClass(this.output);
  var params = {
    admin_id: admin_id,
    check_url: check_url
  };
  var args = new AdminAuthService_authorizeAdminByUrl_args(params);

  try {
    output.writeMessageBegin('authorizeAdminByUrl', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminAuthServiceClient.prototype.recv_authorizeAdminByUrl = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminAuthService_authorizeAdminByUrl_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.unauthorizedException) {
    return callback(result.unauthorizedException);
  }

  callback(null);
};

AdminAuthServiceClient.prototype.introspectToken = function (token, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_introspectToken(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_introspectToken(token);
  }
};

AdminAuthServiceClient.prototype.send_introspectToken = function (token) {
  var output = new this.pClass(this.output);
  var params = {
    token: token
  };
  var args = new AdminAuthService_introspectToken_args(params);

  try {
    output.writeMessageBegin('introspectToken', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminAuthServiceClient.prototype.recv_introspectToken = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminAuthService_introspectToken_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.noTokenException) {
    return callback(result.noTokenException);
  }

  if (null !== result.malformedTokenException) {
    return callback(result.malformedTokenException);
  }

  if (null !== result.expiredTokenException) {
    return callback(result.expiredTokenException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('introspectToken failed: unknown result');
};

var AdminAuthServiceProcessor = exports.Processor = function (handler) {
  this._handler = handler;
};

AdminAuthServiceProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin();

  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};

AdminAuthServiceProcessor.prototype.process_hasHashAuth = function (seqid, input, output) {
  var args = new AdminAuthService_hasHashAuth_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.hasHashAuth.length === 3) {
    Q.fcall(this._handler.hasHashAuth.bind(this._handler), args.hash, args.checkUrl, args.adminId).then(function (result) {
      var result_obj = new AdminAuthService_hasHashAuth_result({
        success: result
      });
      output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.UnauthorizedException) {
        result = new AdminAuthService_hasHashAuth_result(err);
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.hasHashAuth(args.hash, args.checkUrl, args.adminId, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.UnauthorizedException) {
        result_obj = new AdminAuthService_hasHashAuth_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminAuthServiceProcessor.prototype.process_getCurrentHashArray = function (seqid, input, output) {
  var args = new AdminAuthService_getCurrentHashArray_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getCurrentHashArray.length === 2) {
    Q.fcall(this._handler.getCurrentHashArray.bind(this._handler), args.checkUrl, args.adminId).then(function (result) {
      var result_obj = new AdminAuthService_getCurrentHashArray_result({
        success: result
      });
      output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.SystemException) {
        result = new AdminAuthService_getCurrentHashArray_result(err);
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getCurrentHashArray(args.checkUrl, args.adminId, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminAuthService_getCurrentHashArray_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminAuthServiceProcessor.prototype.process_getAdminMenu = function (seqid, input, output) {
  var args = new AdminAuthService_getAdminMenu_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAdminMenu.length === 1) {
    Q.fcall(this._handler.getAdminMenu.bind(this._handler), args.adminId).then(function (result) {
      var result_obj = new AdminAuthService_getAdminMenu_result({
        success: result
      });
      output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.SystemException) {
        result = new AdminAuthService_getAdminMenu_result(err);
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminMenu(args.adminId, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminAuthService_getAdminMenu_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminAuthServiceProcessor.prototype.process_authorize = function (seqid, input, output) {
  var args = new AdminAuthService_authorize_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.authorize.length === 3) {
    Q.fcall(this._handler.authorize.bind(this._handler), args.token, args.methods, args.check_url).then(function (result) {
      var result_obj = new AdminAuthService_authorize_result({
        success: result
      });
      output.writeMessageBegin("authorize", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException || err instanceof Errors_ttypes.UnauthorizedException) {
        result = new AdminAuthService_authorize_result(err);
        output.writeMessageBegin("authorize", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorize", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.authorize(args.token, args.methods, args.check_url, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException || err instanceof Errors_ttypes.UnauthorizedException) {
        result_obj = new AdminAuthService_authorize_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("authorize", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorize", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminAuthServiceProcessor.prototype.process_authorizeByTag = function (seqid, input, output) {
  var args = new AdminAuthService_authorizeByTag_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.authorizeByTag.length === 2) {
    Q.fcall(this._handler.authorizeByTag.bind(this._handler), args.token, args.tags).then(function (result) {
      var result_obj = new AdminAuthService_authorizeByTag_result({
        success: result
      });
      output.writeMessageBegin("authorizeByTag", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException || err instanceof Errors_ttypes.UnauthorizedException) {
        result = new AdminAuthService_authorizeByTag_result(err);
        output.writeMessageBegin("authorizeByTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizeByTag", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.authorizeByTag(args.token, args.tags, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException || err instanceof Errors_ttypes.UnauthorizedException) {
        result_obj = new AdminAuthService_authorizeByTag_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("authorizeByTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizeByTag", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminAuthServiceProcessor.prototype.process_authorizeAdminByTag = function (seqid, input, output) {
  var args = new AdminAuthService_authorizeAdminByTag_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.authorizeAdminByTag.length === 2) {
    Q.fcall(this._handler.authorizeAdminByTag.bind(this._handler), args.admin_id, args.tags).then(function (result) {
      var result_obj = new AdminAuthService_authorizeAdminByTag_result({
        success: result
      });
      output.writeMessageBegin("authorizeAdminByTag", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.UnauthorizedException) {
        result = new AdminAuthService_authorizeAdminByTag_result(err);
        output.writeMessageBegin("authorizeAdminByTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizeAdminByTag", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.authorizeAdminByTag(args.admin_id, args.tags, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.UnauthorizedException) {
        result_obj = new AdminAuthService_authorizeAdminByTag_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("authorizeAdminByTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizeAdminByTag", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminAuthServiceProcessor.prototype.process_authorizeAdminByUrl = function (seqid, input, output) {
  var args = new AdminAuthService_authorizeAdminByUrl_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.authorizeAdminByUrl.length === 2) {
    Q.fcall(this._handler.authorizeAdminByUrl.bind(this._handler), args.admin_id, args.check_url).then(function (result) {
      var result_obj = new AdminAuthService_authorizeAdminByUrl_result({
        success: result
      });
      output.writeMessageBegin("authorizeAdminByUrl", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.UnauthorizedException) {
        result = new AdminAuthService_authorizeAdminByUrl_result(err);
        output.writeMessageBegin("authorizeAdminByUrl", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizeAdminByUrl", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.authorizeAdminByUrl(args.admin_id, args.check_url, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.UnauthorizedException) {
        result_obj = new AdminAuthService_authorizeAdminByUrl_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("authorizeAdminByUrl", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("authorizeAdminByUrl", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminAuthServiceProcessor.prototype.process_introspectToken = function (seqid, input, output) {
  var args = new AdminAuthService_introspectToken_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.introspectToken.length === 1) {
    Q.fcall(this._handler.introspectToken.bind(this._handler), args.token).then(function (result) {
      var result_obj = new AdminAuthService_introspectToken_result({
        success: result
      });
      output.writeMessageBegin("introspectToken", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException) {
        result = new AdminAuthService_introspectToken_result(err);
        output.writeMessageBegin("introspectToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("introspectToken", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.introspectToken(args.token, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.SystemException || err instanceof Errors_ttypes.NoTokenException || err instanceof Errors_ttypes.MalformedTokenException || err instanceof Errors_ttypes.ExpiredTokenException) {
        result_obj = new AdminAuthService_introspectToken_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("introspectToken", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("introspectToken", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};