//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Errors_ttypes = require('./Errors_types');
var AdminTag_ttypes = require('./AdminTag_types');
var AdminMenu_ttypes = require('./AdminMenu_types');

var ttypes = require('./AdminUser_types');
//HELPER FUNCTIONS AND STRUCTURES

var AdminUserService_getAllAdminUserArray_args = function AdminUserService_getAllAdminUserArray_args(args) {};
AdminUserService_getAllAdminUserArray_args.prototype = {};
AdminUserService_getAllAdminUserArray_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getAllAdminUserArray_args.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getAllAdminUserArray_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getAllAdminUserArray_result = function AdminUserService_getAllAdminUserArray_result(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminUser]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminUserService_getAllAdminUserArray_result.prototype = {};
AdminUserService_getAllAdminUserArray_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size0 = 0;
          var _rtmp34;
          this.success = [];
          var _etype3 = 0;
          _rtmp34 = input.readListBegin();
          _etype3 = _rtmp34.etype;
          _size0 = _rtmp34.size;
          for (var _i5 = 0; _i5 < _size0; ++_i5) {
            var elem6 = null;
            elem6 = new ttypes.AdminUser();
            elem6.read(input);
            this.success.push(elem6);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getAllAdminUserArray_result.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getAllAdminUserArray_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success) {
      if (this.success.hasOwnProperty(iter7)) {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getUser_args = function AdminUserService_getUser_args(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
AdminUserService_getUser_args.prototype = {};
AdminUserService_getUser_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getUser_args.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getUser_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getUser_result = function AdminUserService_getUser_result(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AdminUser(args.success);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminUserService_getUser_result.prototype = {};
AdminUserService_getUser_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.AdminUser();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getUser_result.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getUser_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getAdminUserTag_args = function AdminUserService_getAdminUserTag_args(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
AdminUserService_getAdminUserTag_args.prototype = {};
AdminUserService_getAdminUserTag_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getAdminUserTag_args.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getAdminUserTag_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getAdminUserTag_result = function AdminUserService_getAdminUserTag_result(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminUserService_getAdminUserTag_result.prototype = {};
AdminUserService_getAdminUserTag_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size8 = 0;
          var _rtmp312;
          this.success = [];
          var _etype11 = 0;
          _rtmp312 = input.readListBegin();
          _etype11 = _rtmp312.etype;
          _size8 = _rtmp312.size;
          for (var _i13 = 0; _i13 < _size8; ++_i13) {
            var elem14 = null;
            elem14 = input.readI32();
            this.success.push(elem14);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getAdminUserTag_result.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getAdminUserTag_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter15 in this.success) {
      if (this.success.hasOwnProperty(iter15)) {
        iter15 = this.success[iter15];
        output.writeI32(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getAdminUserMenu_args = function AdminUserService_getAdminUserMenu_args(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
AdminUserService_getAdminUserMenu_args.prototype = {};
AdminUserService_getAdminUserMenu_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getAdminUserMenu_args.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getAdminUserMenu_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getAdminUserMenu_result = function AdminUserService_getAdminUserMenu_result(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminUserService_getAdminUserMenu_result.prototype = {};
AdminUserService_getAdminUserMenu_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size16 = 0;
          var _rtmp320;
          this.success = [];
          var _etype19 = 0;
          _rtmp320 = input.readListBegin();
          _etype19 = _rtmp320.etype;
          _size16 = _rtmp320.size;
          for (var _i21 = 0; _i21 < _size16; ++_i21) {
            var elem22 = null;
            elem22 = input.readI32();
            this.success.push(elem22);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getAdminUserMenu_result.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getAdminUserMenu_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter23 in this.success) {
      if (this.success.hasOwnProperty(iter23)) {
        iter23 = this.success[iter23];
        output.writeI32(iter23);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getAllMenuIds_args = function AdminUserService_getAllMenuIds_args(args) {
  this.userId = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
  }
};
AdminUserService_getAllMenuIds_args.prototype = {};
AdminUserService_getAllMenuIds_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getAllMenuIds_args.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getAllMenuIds_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_getAllMenuIds_result = function AdminUserService_getAllMenuIds_result(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminUserService_getAllMenuIds_result.prototype = {};
AdminUserService_getAllMenuIds_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          var _size24 = 0;
          var _rtmp328;
          this.success = [];
          var _etype27 = 0;
          _rtmp328 = input.readListBegin();
          _etype27 = _rtmp328.etype;
          _size24 = _rtmp328.size;
          for (var _i29 = 0; _i29 < _size24; ++_i29) {
            var elem30 = null;
            elem30 = input.readI32();
            this.success.push(elem30);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_getAllMenuIds_result.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_getAllMenuIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);
    for (var iter31 in this.success) {
      if (this.success.hasOwnProperty(iter31)) {
        iter31 = this.success[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_updateMyInfo_args = function AdminUserService_updateMyInfo_args(args) {
  this.name = null;
  this.team = null;
  this.isUse = null;
  this.passwd = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.team !== undefined && args.team !== null) {
      this.team = args.team;
    }
    if (args.isUse !== undefined && args.isUse !== null) {
      this.isUse = args.isUse;
    }
    if (args.passwd !== undefined && args.passwd !== null) {
      this.passwd = args.passwd;
    }
  }
};
AdminUserService_updateMyInfo_args.prototype = {};
AdminUserService_updateMyInfo_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.team = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 3:
        if (ftype == Thrift.Type.BOOL) {
          this.isUse = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
      case 4:
        if (ftype == Thrift.Type.STRING) {
          this.passwd = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_updateMyInfo_args.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_updateMyInfo_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.team !== null && this.team !== undefined) {
    output.writeFieldBegin('team', Thrift.Type.STRING, 2);
    output.writeString(this.team);
    output.writeFieldEnd();
  }
  if (this.isUse !== null && this.isUse !== undefined) {
    output.writeFieldBegin('isUse', Thrift.Type.BOOL, 3);
    output.writeBool(this.isUse);
    output.writeFieldEnd();
  }
  if (this.passwd !== null && this.passwd !== undefined) {
    output.writeFieldBegin('passwd', Thrift.Type.STRING, 4);
    output.writeString(this.passwd);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_updateMyInfo_result = function AdminUserService_updateMyInfo_result(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminUserService_updateMyInfo_result.prototype = {};
AdminUserService_updateMyInfo_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_updateMyInfo_result.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_updateMyInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_updatePassword_args = function AdminUserService_updatePassword_args(args) {
  this.userId = null;
  this.plainPassword = null;
  if (args) {
    if (args.userId !== undefined && args.userId !== null) {
      this.userId = args.userId;
    }
    if (args.plainPassword !== undefined && args.plainPassword !== null) {
      this.plainPassword = args.plainPassword;
    }
  }
};
AdminUserService_updatePassword_args.prototype = {};
AdminUserService_updatePassword_args.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.userId = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.plainPassword = input.readString();
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_updatePassword_args.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_updatePassword_args');
  if (this.userId !== null && this.userId !== undefined) {
    output.writeFieldBegin('userId', Thrift.Type.STRING, 1);
    output.writeString(this.userId);
    output.writeFieldEnd();
  }
  if (this.plainPassword !== null && this.plainPassword !== undefined) {
    output.writeFieldBegin('plainPassword', Thrift.Type.STRING, 2);
    output.writeString(this.plainPassword);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserService_updatePassword_result = function AdminUserService_updatePassword_result(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminUserService_updatePassword_result.prototype = {};
AdminUserService_updatePassword_result.prototype.read = function (input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool();
        } else {
          input.skip(ftype);
        }
        break;
      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminUserService_updatePassword_result.prototype.write = function (output) {
  output.writeStructBegin('AdminUserService_updatePassword_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminUserServiceClient = exports.Client = function (output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
AdminUserServiceClient.prototype = {};
AdminUserServiceClient.prototype.seqid = function () {
  return this._seqid;
};
AdminUserServiceClient.prototype.new_seqid = function () {
  return this._seqid += 1;
};
AdminUserServiceClient.prototype.getAllAdminUserArray = function (callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllAdminUserArray();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllAdminUserArray();
  }
};

AdminUserServiceClient.prototype.send_getAllAdminUserArray = function () {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllAdminUserArray', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserService_getAllAdminUserArray_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserServiceClient.prototype.recv_getAllAdminUserArray = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserService_getAllAdminUserArray_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllAdminUserArray failed: unknown result');
};
AdminUserServiceClient.prototype.getUser = function (userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getUser(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getUser(userId);
  }
};

AdminUserServiceClient.prototype.send_getUser = function (userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getUser', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserService_getUser_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserServiceClient.prototype.recv_getUser = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserService_getUser_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getUser failed: unknown result');
};
AdminUserServiceClient.prototype.getAdminUserTag = function (userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAdminUserTag(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminUserTag(userId);
  }
};

AdminUserServiceClient.prototype.send_getAdminUserTag = function (userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAdminUserTag', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserService_getAdminUserTag_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserServiceClient.prototype.recv_getAdminUserTag = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserService_getAdminUserTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAdminUserTag failed: unknown result');
};
AdminUserServiceClient.prototype.getAdminUserMenu = function (userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAdminUserMenu(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminUserMenu(userId);
  }
};

AdminUserServiceClient.prototype.send_getAdminUserMenu = function (userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAdminUserMenu', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserService_getAdminUserMenu_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserServiceClient.prototype.recv_getAdminUserMenu = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserService_getAdminUserMenu_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAdminUserMenu failed: unknown result');
};
AdminUserServiceClient.prototype.getAllMenuIds = function (userId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllMenuIds(userId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllMenuIds(userId);
  }
};

AdminUserServiceClient.prototype.send_getAllMenuIds = function (userId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllMenuIds', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserService_getAllMenuIds_args();
  args.userId = userId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserServiceClient.prototype.recv_getAllMenuIds = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserService_getAllMenuIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllMenuIds failed: unknown result');
};
AdminUserServiceClient.prototype.updateMyInfo = function (name, team, isUse, passwd, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updateMyInfo(name, team, isUse, passwd);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updateMyInfo(name, team, isUse, passwd);
  }
};

AdminUserServiceClient.prototype.send_updateMyInfo = function (name, team, isUse, passwd) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateMyInfo', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserService_updateMyInfo_args();
  args.name = name;
  args.team = team;
  args.isUse = isUse;
  args.passwd = passwd;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserServiceClient.prototype.recv_updateMyInfo = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserService_updateMyInfo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updateMyInfo failed: unknown result');
};
AdminUserServiceClient.prototype.updatePassword = function (userId, plainPassword, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_updatePassword(userId, plainPassword);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_updatePassword(userId, plainPassword);
  }
};

AdminUserServiceClient.prototype.send_updatePassword = function (userId, plainPassword) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updatePassword', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminUserService_updatePassword_args();
  args.userId = userId;
  args.plainPassword = plainPassword;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminUserServiceClient.prototype.recv_updatePassword = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminUserService_updatePassword_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('updatePassword failed: unknown result');
};
var AdminUserServiceProcessor = exports.Processor = function (handler) {
  this._handler = handler;
};
AdminUserServiceProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
AdminUserServiceProcessor.prototype.process_getAllAdminUserArray = function (seqid, input, output) {
  var args = new AdminUserService_getAllAdminUserArray_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllAdminUserArray.length === 0) {
    Q.fcall(this._handler.getAllAdminUserArray).then(function (result) {
      var result_obj = new AdminUserService_getAllAdminUserArray_result({ success: result });
      output.writeMessageBegin("getAllAdminUserArray", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminUserService_getAllAdminUserArray_result(err);
        output.writeMessageBegin("getAllAdminUserArray", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllAdminUserArray", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllAdminUserArray(function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminUserService_getAllAdminUserArray_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("getAllAdminUserArray", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllAdminUserArray", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserServiceProcessor.prototype.process_getUser = function (seqid, input, output) {
  var args = new AdminUserService_getUser_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getUser.length === 1) {
    Q.fcall(this._handler.getUser, args.userId).then(function (result) {
      var result_obj = new AdminUserService_getUser_result({ success: result });
      output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminUserService_getUser_result(err);
        output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getUser(args.userId, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminUserService_getUser_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("getUser", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getUser", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserServiceProcessor.prototype.process_getAdminUserTag = function (seqid, input, output) {
  var args = new AdminUserService_getAdminUserTag_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAdminUserTag.length === 1) {
    Q.fcall(this._handler.getAdminUserTag, args.userId).then(function (result) {
      var result_obj = new AdminUserService_getAdminUserTag_result({ success: result });
      output.writeMessageBegin("getAdminUserTag", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminUserService_getAdminUserTag_result(err);
        output.writeMessageBegin("getAdminUserTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminUserTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminUserTag(args.userId, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminUserService_getAdminUserTag_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("getAdminUserTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminUserTag", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserServiceProcessor.prototype.process_getAdminUserMenu = function (seqid, input, output) {
  var args = new AdminUserService_getAdminUserMenu_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAdminUserMenu.length === 1) {
    Q.fcall(this._handler.getAdminUserMenu, args.userId).then(function (result) {
      var result_obj = new AdminUserService_getAdminUserMenu_result({ success: result });
      output.writeMessageBegin("getAdminUserMenu", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminUserService_getAdminUserMenu_result(err);
        output.writeMessageBegin("getAdminUserMenu", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminUserMenu", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminUserMenu(args.userId, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminUserService_getAdminUserMenu_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("getAdminUserMenu", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminUserMenu", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserServiceProcessor.prototype.process_getAllMenuIds = function (seqid, input, output) {
  var args = new AdminUserService_getAllMenuIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllMenuIds.length === 1) {
    Q.fcall(this._handler.getAllMenuIds, args.userId).then(function (result) {
      var result_obj = new AdminUserService_getAllMenuIds_result({ success: result });
      output.writeMessageBegin("getAllMenuIds", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminUserService_getAllMenuIds_result(err);
        output.writeMessageBegin("getAllMenuIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMenuIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllMenuIds(args.userId, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminUserService_getAllMenuIds_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("getAllMenuIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMenuIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserServiceProcessor.prototype.process_updateMyInfo = function (seqid, input, output) {
  var args = new AdminUserService_updateMyInfo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updateMyInfo.length === 4) {
    Q.fcall(this._handler.updateMyInfo, args.name, args.team, args.isUse, args.passwd).then(function (result) {
      var result_obj = new AdminUserService_updateMyInfo_result({ success: result });
      output.writeMessageBegin("updateMyInfo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminUserService_updateMyInfo_result(err);
        output.writeMessageBegin("updateMyInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateMyInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updateMyInfo(args.name, args.team, args.isUse, args.passwd, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminUserService_updateMyInfo_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("updateMyInfo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updateMyInfo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminUserServiceProcessor.prototype.process_updatePassword = function (seqid, input, output) {
  var args = new AdminUserService_updatePassword_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.updatePassword.length === 2) {
    Q.fcall(this._handler.updatePassword, args.userId, args.plainPassword).then(function (result) {
      var result_obj = new AdminUserService_updatePassword_result({ success: result });
      output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }, function (err) {
      var result;
      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminUserService_updatePassword_result(err);
        output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updatePassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.updatePassword(args.userId, args.plainPassword, function (err, result) {
      var result_obj;
      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminUserService_updatePassword_result(err !== null || typeof err === 'undefined' ? err : { success: result });
        output.writeMessageBegin("updatePassword", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("updatePassword", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};