//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');

var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Int64 = require('node-int64');

var Errors_ttypes = require('./Errors_types');

var ttypes = module.exports = {};

var AdminMenu = module.exports.AdminMenu = function (args) {
  this.id = null;
  this.menu_title = null;
  this.menu_url = null;
  this.menu_deep = null;
  this.menu_order = null;
  this.is_use = null;
  this.is_show = null;
  this.reg_date = null;
  this.is_newtab = null;

  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }

    if (args.menu_title !== undefined && args.menu_title !== null) {
      this.menu_title = args.menu_title;
    }

    if (args.menu_url !== undefined && args.menu_url !== null) {
      this.menu_url = args.menu_url;
    }

    if (args.menu_deep !== undefined && args.menu_deep !== null) {
      this.menu_deep = args.menu_deep;
    }

    if (args.menu_order !== undefined && args.menu_order !== null) {
      this.menu_order = args.menu_order;
    }

    if (args.is_use !== undefined && args.is_use !== null) {
      this.is_use = args.is_use;
    }

    if (args.is_show !== undefined && args.is_show !== null) {
      this.is_show = args.is_show;
    }

    if (args.reg_date !== undefined && args.reg_date !== null) {
      this.reg_date = args.reg_date;
    }

    if (args.is_newtab !== undefined && args.is_newtab !== null) {
      this.is_newtab = args.is_newtab;
    }
  }
};

AdminMenu.prototype = {};

AdminMenu.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.id = input.readI32();
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRING) {
          this.menu_title = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 3:
        if (ftype == Thrift.Type.STRING) {
          this.menu_url = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 4:
        if (ftype == Thrift.Type.I32) {
          this.menu_deep = input.readI32();
        } else {
          input.skip(ftype);
        }

        break;

      case 5:
        if (ftype == Thrift.Type.I32) {
          this.menu_order = input.readI32();
        } else {
          input.skip(ftype);
        }

        break;

      case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.is_use = input.readBool();
        } else {
          input.skip(ftype);
        }

        break;

      case 7:
        if (ftype == Thrift.Type.BOOL) {
          this.is_show = input.readBool();
        } else {
          input.skip(ftype);
        }

        break;

      case 8:
        if (ftype == Thrift.Type.STRING) {
          this.reg_date = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 9:
        if (ftype == Thrift.Type.BOOL) {
          this.is_newtab = input.readBool();
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenu.prototype.write = function (output) {
  output.writeStructBegin('AdminMenu');

  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }

  if (this.menu_title !== null && this.menu_title !== undefined) {
    output.writeFieldBegin('menu_title', Thrift.Type.STRING, 2);
    output.writeString(this.menu_title);
    output.writeFieldEnd();
  }

  if (this.menu_url !== null && this.menu_url !== undefined) {
    output.writeFieldBegin('menu_url', Thrift.Type.STRING, 3);
    output.writeString(this.menu_url);
    output.writeFieldEnd();
  }

  if (this.menu_deep !== null && this.menu_deep !== undefined) {
    output.writeFieldBegin('menu_deep', Thrift.Type.I32, 4);
    output.writeI32(this.menu_deep);
    output.writeFieldEnd();
  }

  if (this.menu_order !== null && this.menu_order !== undefined) {
    output.writeFieldBegin('menu_order', Thrift.Type.I32, 5);
    output.writeI32(this.menu_order);
    output.writeFieldEnd();
  }

  if (this.is_use !== null && this.is_use !== undefined) {
    output.writeFieldBegin('is_use', Thrift.Type.BOOL, 6);
    output.writeBool(this.is_use);
    output.writeFieldEnd();
  }

  if (this.is_show !== null && this.is_show !== undefined) {
    output.writeFieldBegin('is_show', Thrift.Type.BOOL, 7);
    output.writeBool(this.is_show);
    output.writeFieldEnd();
  }

  if (this.reg_date !== null && this.reg_date !== undefined) {
    output.writeFieldBegin('reg_date', Thrift.Type.STRING, 8);
    output.writeString(this.reg_date);
    output.writeFieldEnd();
  }

  if (this.is_newtab !== null && this.is_newtab !== undefined) {
    output.writeFieldBegin('is_newtab', Thrift.Type.BOOL, 9);
    output.writeBool(this.is_newtab);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TokenClaim = module.exports.TokenClaim = function (args) {
  this.admin_id = null;

  if (args) {
    if (args.admin_id !== undefined && args.admin_id !== null) {
      this.admin_id = args.admin_id;
    }
  }
};

TokenClaim.prototype = {};

TokenClaim.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.admin_id = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

TokenClaim.prototype.write = function (output) {
  output.writeStructBegin('TokenClaim');

  if (this.admin_id !== null && this.admin_id !== undefined) {
    output.writeFieldBegin('admin_id', Thrift.Type.STRING, 1);
    output.writeString(this.admin_id);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};