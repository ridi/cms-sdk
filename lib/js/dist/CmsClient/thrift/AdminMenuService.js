//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');

var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Int64 = require('node-int64');

var Errors_ttypes = require('./Errors_types');

var ttypes = require('./AdminMenu_types'); //HELPER FUNCTIONS AND STRUCTURES


var AdminMenuService_getMenuList_args = function (args) {
  this.isUse = null;

  if (args) {
    if (args.isUse !== undefined && args.isUse !== null) {
      this.isUse = args.isUse;
    }
  }
};

AdminMenuService_getMenuList_args.prototype = {};

AdminMenuService_getMenuList_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.BOOL) {
          this.isUse = input.readBool();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getMenuList_args.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getMenuList_args');

  if (this.isUse !== null && this.isUse !== undefined) {
    output.writeFieldBegin('isUse', Thrift.Type.BOOL, 1);
    output.writeBool(this.isUse);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getMenuList_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminMenuService_getMenuList_result.prototype = {};

AdminMenuService_getMenuList_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp31 = input.readListBegin();

          var _size0 = _rtmp31.size || 0;

          for (var _i2 = 0; _i2 < _size0; ++_i2) {
            var elem3 = null;
            elem3 = new ttypes.AdminMenu();
            elem3.read(input);
            this.success.push(elem3);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getMenuList_result.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getMenuList_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);

    for (var iter4 in this.success) {
      if (this.success.hasOwnProperty(iter4)) {
        iter4 = this.success[iter4];
        iter4.write(output);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllMenuList_args = function (args) {};

AdminMenuService_getAllMenuList_args.prototype = {};

AdminMenuService_getAllMenuList_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    input.skip(ftype);
    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getAllMenuList_args.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getAllMenuList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllMenuList_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminMenuService_getAllMenuList_result.prototype = {};

AdminMenuService_getAllMenuList_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp36 = input.readListBegin();

          var _size5 = _rtmp36.size || 0;

          for (var _i7 = 0; _i7 < _size5; ++_i7) {
            var elem8 = null;
            elem8 = new ttypes.AdminMenu();
            elem8.read(input);
            this.success.push(elem8);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getAllMenuList_result.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getAllMenuList_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);

    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        iter9.write(output);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllMenuAjax_args = function (args) {};

AdminMenuService_getAllMenuAjax_args.prototype = {};

AdminMenuService_getAllMenuAjax_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    input.skip(ftype);
    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getAllMenuAjax_args.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getAllMenuAjax_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllMenuAjax_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenuAjax]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminMenuService_getAllMenuAjax_result.prototype = {};

AdminMenuService_getAllMenuAjax_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp311 = input.readListBegin();

          var _size10 = _rtmp311.size || 0;

          for (var _i12 = 0; _i12 < _size10; ++_i12) {
            var elem13 = null;
            elem13 = new ttypes.AdminMenuAjax();
            elem13.read(input);
            this.success.push(elem13);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getAllMenuAjax_result.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getAllMenuAjax_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);

    for (var iter14 in this.success) {
      if (this.success.hasOwnProperty(iter14)) {
        iter14 = this.success[iter14];
        iter14.write(output);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getMenus_args = function (args) {
  this.menuIds = null;

  if (args) {
    if (args.menuIds !== undefined && args.menuIds !== null) {
      this.menuIds = Thrift.copyList(args.menuIds, [null]);
    }
  }
};

AdminMenuService_getMenus_args.prototype = {};

AdminMenuService_getMenus_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          this.menuIds = [];

          var _rtmp316 = input.readListBegin();

          var _size15 = _rtmp316.size || 0;

          for (var _i17 = 0; _i17 < _size15; ++_i17) {
            var elem18 = null;
            elem18 = input.readI32();
            this.menuIds.push(elem18);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getMenus_args.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getMenus_args');

  if (this.menuIds !== null && this.menuIds !== undefined) {
    output.writeFieldBegin('menuIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.menuIds.length);

    for (var iter19 in this.menuIds) {
      if (this.menuIds.hasOwnProperty(iter19)) {
        iter19 = this.menuIds[iter19];
        output.writeI32(iter19);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getMenus_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminMenuService_getMenus_result.prototype = {};

AdminMenuService_getMenus_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp321 = input.readListBegin();

          var _size20 = _rtmp321.size || 0;

          for (var _i22 = 0; _i22 < _size20; ++_i22) {
            var elem23 = null;
            elem23 = new ttypes.AdminMenu();
            elem23.read(input);
            this.success.push(elem23);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getMenus_result.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getMenus_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);

    for (var iter24 in this.success) {
      if (this.success.hasOwnProperty(iter24)) {
        iter24 = this.success[iter24];
        iter24.write(output);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAdminIdsByMenuId_args = function (args) {
  this.menuId = null;

  if (args) {
    if (args.menuId !== undefined && args.menuId !== null) {
      this.menuId = args.menuId;
    }
  }
};

AdminMenuService_getAdminIdsByMenuId_args.prototype = {};

AdminMenuService_getAdminIdsByMenuId_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.menuId = input.readI32();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getAdminIdsByMenuId_args.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getAdminIdsByMenuId_args');

  if (this.menuId !== null && this.menuId !== undefined) {
    output.writeFieldBegin('menuId', Thrift.Type.I32, 1);
    output.writeI32(this.menuId);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAdminIdsByMenuId_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminMenuService_getAdminIdsByMenuId_result.prototype = {};

AdminMenuService_getAdminIdsByMenuId_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp326 = input.readListBegin();

          var _size25 = _rtmp326.size || 0;

          for (var _i27 = 0; _i27 < _size25; ++_i27) {
            var elem28 = null;
            elem28 = input.readString();
            this.success.push(elem28);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getAdminIdsByMenuId_result.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getAdminIdsByMenuId_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);

    for (var iter29 in this.success) {
      if (this.success.hasOwnProperty(iter29)) {
        iter29 = this.success[iter29];
        output.writeString(iter29);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllUserIds_args = function (args) {
  this.menuId = null;

  if (args) {
    if (args.menuId !== undefined && args.menuId !== null) {
      this.menuId = args.menuId;
    }
  }
};

AdminMenuService_getAllUserIds_args.prototype = {};

AdminMenuService_getAllUserIds_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.menuId = input.readI32();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getAllUserIds_args.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getAllUserIds_args');

  if (this.menuId !== null && this.menuId !== undefined) {
    output.writeFieldBegin('menuId', Thrift.Type.I32, 1);
    output.writeI32(this.menuId);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllUserIds_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminMenuService_getAllUserIds_result.prototype = {};

AdminMenuService_getAllUserIds_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp331 = input.readListBegin();

          var _size30 = _rtmp331.size || 0;

          for (var _i32 = 0; _i32 < _size30; ++_i32) {
            var elem33 = null;
            elem33 = input.readString();
            this.success.push(elem33);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminMenuService_getAllUserIds_result.prototype.write = function (output) {
  output.writeStructBegin('AdminMenuService_getAllUserIds_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);

    for (var iter34 in this.success) {
      if (this.success.hasOwnProperty(iter34)) {
        iter34 = this.success[iter34];
        output.writeString(iter34);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuServiceClient = exports.Client = function (output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};

AdminMenuServiceClient.prototype = {};

AdminMenuServiceClient.prototype.seqid = function () {
  return this._seqid;
};

AdminMenuServiceClient.prototype.new_seqid = function () {
  return this._seqid += 1;
};

AdminMenuServiceClient.prototype.getMenuList = function (isUse, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getMenuList(isUse);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMenuList(isUse);
  }
};

AdminMenuServiceClient.prototype.send_getMenuList = function (isUse) {
  var output = new this.pClass(this.output);
  var params = {
    isUse: isUse
  };
  var args = new AdminMenuService_getMenuList_args(params);

  try {
    output.writeMessageBegin('getMenuList', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminMenuServiceClient.prototype.recv_getMenuList = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminMenuService_getMenuList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getMenuList failed: unknown result');
};

AdminMenuServiceClient.prototype.getAllMenuList = function (callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAllMenuList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllMenuList();
  }
};

AdminMenuServiceClient.prototype.send_getAllMenuList = function () {
  var output = new this.pClass(this.output);
  var args = new AdminMenuService_getAllMenuList_args();

  try {
    output.writeMessageBegin('getAllMenuList', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminMenuServiceClient.prototype.recv_getAllMenuList = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminMenuService_getAllMenuList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAllMenuList failed: unknown result');
};

AdminMenuServiceClient.prototype.getAllMenuAjax = function (callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAllMenuAjax();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllMenuAjax();
  }
};

AdminMenuServiceClient.prototype.send_getAllMenuAjax = function () {
  var output = new this.pClass(this.output);
  var args = new AdminMenuService_getAllMenuAjax_args();

  try {
    output.writeMessageBegin('getAllMenuAjax', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminMenuServiceClient.prototype.recv_getAllMenuAjax = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminMenuService_getAllMenuAjax_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAllMenuAjax failed: unknown result');
};

AdminMenuServiceClient.prototype.getMenus = function (menuIds, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getMenus(menuIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMenus(menuIds);
  }
};

AdminMenuServiceClient.prototype.send_getMenus = function (menuIds) {
  var output = new this.pClass(this.output);
  var params = {
    menuIds: menuIds
  };
  var args = new AdminMenuService_getMenus_args(params);

  try {
    output.writeMessageBegin('getMenus', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminMenuServiceClient.prototype.recv_getMenus = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminMenuService_getMenus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getMenus failed: unknown result');
};

AdminMenuServiceClient.prototype.getAdminIdsByMenuId = function (menuId, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAdminIdsByMenuId(menuId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminIdsByMenuId(menuId);
  }
};

AdminMenuServiceClient.prototype.send_getAdminIdsByMenuId = function (menuId) {
  var output = new this.pClass(this.output);
  var params = {
    menuId: menuId
  };
  var args = new AdminMenuService_getAdminIdsByMenuId_args(params);

  try {
    output.writeMessageBegin('getAdminIdsByMenuId', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminMenuServiceClient.prototype.recv_getAdminIdsByMenuId = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminMenuService_getAdminIdsByMenuId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAdminIdsByMenuId failed: unknown result');
};

AdminMenuServiceClient.prototype.getAllUserIds = function (menuId, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAllUserIds(menuId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllUserIds(menuId);
  }
};

AdminMenuServiceClient.prototype.send_getAllUserIds = function (menuId) {
  var output = new this.pClass(this.output);
  var params = {
    menuId: menuId
  };
  var args = new AdminMenuService_getAllUserIds_args(params);

  try {
    output.writeMessageBegin('getAllUserIds', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminMenuServiceClient.prototype.recv_getAllUserIds = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminMenuService_getAllUserIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAllUserIds failed: unknown result');
};

var AdminMenuServiceProcessor = exports.Processor = function (handler) {
  this._handler = handler;
};

AdminMenuServiceProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin();

  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};

AdminMenuServiceProcessor.prototype.process_getMenuList = function (seqid, input, output) {
  var args = new AdminMenuService_getMenuList_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getMenuList.length === 1) {
    Q.fcall(this._handler.getMenuList.bind(this._handler), args.isUse).then(function (result) {
      var result_obj = new AdminMenuService_getMenuList_result({
        success: result
      });
      output.writeMessageBegin("getMenuList", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminMenuService_getMenuList_result(err);
        output.writeMessageBegin("getMenuList", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMenuList", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getMenuList(args.isUse, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getMenuList_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getMenuList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMenuList", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminMenuServiceProcessor.prototype.process_getAllMenuList = function (seqid, input, output) {
  var args = new AdminMenuService_getAllMenuList_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAllMenuList.length === 0) {
    Q.fcall(this._handler.getAllMenuList.bind(this._handler)).then(function (result) {
      var result_obj = new AdminMenuService_getAllMenuList_result({
        success: result
      });
      output.writeMessageBegin("getAllMenuList", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminMenuService_getAllMenuList_result(err);
        output.writeMessageBegin("getAllMenuList", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMenuList", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllMenuList(function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getAllMenuList_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAllMenuList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMenuList", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminMenuServiceProcessor.prototype.process_getAllMenuAjax = function (seqid, input, output) {
  var args = new AdminMenuService_getAllMenuAjax_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAllMenuAjax.length === 0) {
    Q.fcall(this._handler.getAllMenuAjax.bind(this._handler)).then(function (result) {
      var result_obj = new AdminMenuService_getAllMenuAjax_result({
        success: result
      });
      output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminMenuService_getAllMenuAjax_result(err);
        output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllMenuAjax(function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getAllMenuAjax_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminMenuServiceProcessor.prototype.process_getMenus = function (seqid, input, output) {
  var args = new AdminMenuService_getMenus_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getMenus.length === 1) {
    Q.fcall(this._handler.getMenus.bind(this._handler), args.menuIds).then(function (result) {
      var result_obj = new AdminMenuService_getMenus_result({
        success: result
      });
      output.writeMessageBegin("getMenus", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminMenuService_getMenus_result(err);
        output.writeMessageBegin("getMenus", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMenus", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getMenus(args.menuIds, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getMenus_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getMenus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMenus", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminMenuServiceProcessor.prototype.process_getAdminIdsByMenuId = function (seqid, input, output) {
  var args = new AdminMenuService_getAdminIdsByMenuId_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAdminIdsByMenuId.length === 1) {
    Q.fcall(this._handler.getAdminIdsByMenuId.bind(this._handler), args.menuId).then(function (result) {
      var result_obj = new AdminMenuService_getAdminIdsByMenuId_result({
        success: result
      });
      output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminMenuService_getAdminIdsByMenuId_result(err);
        output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminIdsByMenuId(args.menuId, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getAdminIdsByMenuId_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminMenuServiceProcessor.prototype.process_getAllUserIds = function (seqid, input, output) {
  var args = new AdminMenuService_getAllUserIds_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAllUserIds.length === 1) {
    Q.fcall(this._handler.getAllUserIds.bind(this._handler), args.menuId).then(function (result) {
      var result_obj = new AdminMenuService_getAllUserIds_result({
        success: result
      });
      output.writeMessageBegin("getAllUserIds", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminMenuService_getAllUserIds_result(err);
        output.writeMessageBegin("getAllUserIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllUserIds", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAllUserIds(args.menuId, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getAllUserIds_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAllUserIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllUserIds", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};