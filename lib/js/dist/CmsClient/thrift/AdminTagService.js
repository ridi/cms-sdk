//
// Autogenerated by Thrift Compiler (0.13.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');

var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Int64 = require('node-int64');

var Errors_ttypes = require('./Errors_types');

var AdminMenu_ttypes = require('./AdminMenu_types');

var ttypes = require('./AdminTag_types'); //HELPER FUNCTIONS AND STRUCTURES


var AdminTagService_getAdminIdsFromTags_args = function (args) {
  this.tag_ids = null;

  if (args) {
    if (args.tag_ids !== undefined && args.tag_ids !== null) {
      this.tag_ids = Thrift.copyList(args.tag_ids, [null]);
    }
  }
};

AdminTagService_getAdminIdsFromTags_args.prototype = {};

AdminTagService_getAdminIdsFromTags_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          this.tag_ids = [];

          var _rtmp31 = input.readListBegin();

          var _size0 = _rtmp31.size || 0;

          for (var _i2 = 0; _i2 < _size0; ++_i2) {
            var elem3 = null;
            elem3 = input.readI32();
            this.tag_ids.push(elem3);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getAdminIdsFromTags_args.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getAdminIdsFromTags_args');

  if (this.tag_ids !== null && this.tag_ids !== undefined) {
    output.writeFieldBegin('tag_ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.tag_ids.length);

    for (var iter4 in this.tag_ids) {
      if (this.tag_ids.hasOwnProperty(iter4)) {
        iter4 = this.tag_ids[iter4];
        output.writeI32(iter4);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getAdminIdsFromTags_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminTagService_getAdminIdsFromTags_result.prototype = {};

AdminTagService_getAdminIdsFromTags_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp36 = input.readListBegin();

          var _size5 = _rtmp36.size || 0;

          for (var _i7 = 0; _i7 < _size5; ++_i7) {
            var elem8 = null;
            elem8 = input.readString();
            this.success.push(elem8);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getAdminIdsFromTags_result.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getAdminIdsFromTags_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);

    for (var iter9 in this.success) {
      if (this.success.hasOwnProperty(iter9)) {
        iter9 = this.success[iter9];
        output.writeString(iter9);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getAdminTagMenus_args = function (args) {
  this.tag_id = null;

  if (args) {
    if (args.tag_id !== undefined && args.tag_id !== null) {
      this.tag_id = args.tag_id;
    }
  }
};

AdminTagService_getAdminTagMenus_args.prototype = {};

AdminTagService_getAdminTagMenus_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.tag_id = input.readI32();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getAdminTagMenus_args.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getAdminTagMenus_args');

  if (this.tag_id !== null && this.tag_id !== undefined) {
    output.writeFieldBegin('tag_id', Thrift.Type.I32, 1);
    output.writeI32(this.tag_id);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getAdminTagMenus_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminTagService_getAdminTagMenus_result.prototype = {};

AdminTagService_getAdminTagMenus_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp311 = input.readListBegin();

          var _size10 = _rtmp311.size || 0;

          for (var _i12 = 0; _i12 < _size10; ++_i12) {
            var elem13 = null;
            elem13 = input.readI32();
            this.success.push(elem13);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getAdminTagMenus_result.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getAdminTagMenus_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I32, this.success.length);

    for (var iter14 in this.success) {
      if (this.success.hasOwnProperty(iter14)) {
        iter14 = this.success[iter14];
        output.writeI32(iter14);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getMappedAdminMenuHashes_args = function (args) {
  this.check_url = null;
  this.tag_id = null;

  if (args) {
    if (args.check_url !== undefined && args.check_url !== null) {
      this.check_url = args.check_url;
    }

    if (args.tag_id !== undefined && args.tag_id !== null) {
      this.tag_id = args.tag_id;
    }
  }
};

AdminTagService_getMappedAdminMenuHashes_args.prototype = {};

AdminTagService_getMappedAdminMenuHashes_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.STRING) {
          this.check_url = input.readString();
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.I32) {
          this.tag_id = input.readI32();
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getMappedAdminMenuHashes_args.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getMappedAdminMenuHashes_args');

  if (this.check_url !== null && this.check_url !== undefined) {
    output.writeFieldBegin('check_url', Thrift.Type.STRING, 1);
    output.writeString(this.check_url);
    output.writeFieldEnd();
  }

  if (this.tag_id !== null && this.tag_id !== undefined) {
    output.writeFieldBegin('tag_id', Thrift.Type.I32, 2);
    output.writeI32(this.tag_id);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getMappedAdminMenuHashes_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminTagService_getMappedAdminMenuHashes_result.prototype = {};

AdminTagService_getMappedAdminMenuHashes_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp316 = input.readListBegin();

          var _size15 = _rtmp316.size || 0;

          for (var _i17 = 0; _i17 < _size15; ++_i17) {
            var elem18 = null;
            elem18 = input.readString();
            this.success.push(elem18);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getMappedAdminMenuHashes_result.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getMappedAdminMenuHashes_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);

    for (var iter19 in this.success) {
      if (this.success.hasOwnProperty(iter19)) {
        iter19 = this.success[iter19];
        output.writeString(iter19);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getAdminTag_args = function (args) {
  this.tag_id = null;

  if (args) {
    if (args.tag_id !== undefined && args.tag_id !== null) {
      this.tag_id = args.tag_id;
    }
  }
};

AdminTagService_getAdminTag_args.prototype = {};

AdminTagService_getAdminTag_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.I32) {
          this.tag_id = input.readI32();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getAdminTag_args.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getAdminTag_args');

  if (this.tag_id !== null && this.tag_id !== undefined) {
    output.writeFieldBegin('tag_id', Thrift.Type.I32, 1);
    output.writeI32(this.tag_id);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getAdminTag_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.AdminTag(args.success);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminTagService_getAdminTag_result.prototype = {};

AdminTagService_getAdminTag_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new ttypes.AdminTag();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getAdminTag_result.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getAdminTag_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getAdminTags_args = function (args) {
  this.tag_ids = null;

  if (args) {
    if (args.tag_ids !== undefined && args.tag_ids !== null) {
      this.tag_ids = Thrift.copyList(args.tag_ids, [null]);
    }
  }
};

AdminTagService_getAdminTags_args.prototype = {};

AdminTagService_getAdminTags_args.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 1:
        if (ftype == Thrift.Type.LIST) {
          this.tag_ids = [];

          var _rtmp321 = input.readListBegin();

          var _size20 = _rtmp321.size || 0;

          for (var _i22 = 0; _i22 < _size20; ++_i22) {
            var elem23 = null;
            elem23 = input.readI32();
            this.tag_ids.push(elem23);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 0:
        input.skip(ftype);
        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getAdminTags_args.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getAdminTags_args');

  if (this.tag_ids !== null && this.tag_ids !== undefined) {
    output.writeFieldBegin('tag_ids', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.tag_ids.length);

    for (var iter24 in this.tag_ids) {
      if (this.tag_ids.hasOwnProperty(iter24)) {
        iter24 = this.tag_ids[iter24];
        output.writeI32(iter24);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagService_getAdminTags_result = function (args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;

  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }

  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }

  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminTag]);
    }

    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }

    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};

AdminTagService_getAdminTags_result.prototype = {};

AdminTagService_getAdminTags_result.prototype.read = function (input) {
  input.readStructBegin();

  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;

    if (ftype == Thrift.Type.STOP) {
      break;
    }

    switch (fid) {
      case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];

          var _rtmp326 = input.readListBegin();

          var _size25 = _rtmp326.size || 0;

          for (var _i27 = 0; _i27 < _size25; ++_i27) {
            var elem28 = null;
            elem28 = new ttypes.AdminTag();
            elem28.read(input);
            this.success.push(elem28);
          }

          input.readListEnd();
        } else {
          input.skip(ftype);
        }

        break;

      case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.userException = new Errors_ttypes.UserException();
          this.userException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      case 2:
        if (ftype == Thrift.Type.STRUCT) {
          this.systemException = new Errors_ttypes.SystemException();
          this.systemException.read(input);
        } else {
          input.skip(ftype);
        }

        break;

      default:
        input.skip(ftype);
    }

    input.readFieldEnd();
  }

  input.readStructEnd();
  return;
};

AdminTagService_getAdminTags_result.prototype.write = function (output) {
  output.writeStructBegin('AdminTagService_getAdminTags_result');

  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);

    for (var iter29 in this.success) {
      if (this.success.hasOwnProperty(iter29)) {
        iter29 = this.success[iter29];
        iter29.write(output);
      }
    }

    output.writeListEnd();
    output.writeFieldEnd();
  }

  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }

  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }

  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminTagServiceClient = exports.Client = function (output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};

AdminTagServiceClient.prototype = {};

AdminTagServiceClient.prototype.seqid = function () {
  return this._seqid;
};

AdminTagServiceClient.prototype.new_seqid = function () {
  return this._seqid += 1;
};

AdminTagServiceClient.prototype.getAdminIdsFromTags = function (tag_ids, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAdminIdsFromTags(tag_ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminIdsFromTags(tag_ids);
  }
};

AdminTagServiceClient.prototype.send_getAdminIdsFromTags = function (tag_ids) {
  var output = new this.pClass(this.output);
  var params = {
    tag_ids: tag_ids
  };
  var args = new AdminTagService_getAdminIdsFromTags_args(params);

  try {
    output.writeMessageBegin('getAdminIdsFromTags', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminTagServiceClient.prototype.recv_getAdminIdsFromTags = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminTagService_getAdminIdsFromTags_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAdminIdsFromTags failed: unknown result');
};

AdminTagServiceClient.prototype.getAdminTagMenus = function (tag_id, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAdminTagMenus(tag_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminTagMenus(tag_id);
  }
};

AdminTagServiceClient.prototype.send_getAdminTagMenus = function (tag_id) {
  var output = new this.pClass(this.output);
  var params = {
    tag_id: tag_id
  };
  var args = new AdminTagService_getAdminTagMenus_args(params);

  try {
    output.writeMessageBegin('getAdminTagMenus', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminTagServiceClient.prototype.recv_getAdminTagMenus = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminTagService_getAdminTagMenus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAdminTagMenus failed: unknown result');
};

AdminTagServiceClient.prototype.getMappedAdminMenuHashes = function (check_url, tag_id, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getMappedAdminMenuHashes(check_url, tag_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMappedAdminMenuHashes(check_url, tag_id);
  }
};

AdminTagServiceClient.prototype.send_getMappedAdminMenuHashes = function (check_url, tag_id) {
  var output = new this.pClass(this.output);
  var params = {
    check_url: check_url,
    tag_id: tag_id
  };
  var args = new AdminTagService_getMappedAdminMenuHashes_args(params);

  try {
    output.writeMessageBegin('getMappedAdminMenuHashes', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminTagServiceClient.prototype.recv_getMappedAdminMenuHashes = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminTagService_getMappedAdminMenuHashes_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getMappedAdminMenuHashes failed: unknown result');
};

AdminTagServiceClient.prototype.getAdminTag = function (tag_id, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAdminTag(tag_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminTag(tag_id);
  }
};

AdminTagServiceClient.prototype.send_getAdminTag = function (tag_id) {
  var output = new this.pClass(this.output);
  var params = {
    tag_id: tag_id
  };
  var args = new AdminTagService_getAdminTag_args(params);

  try {
    output.writeMessageBegin('getAdminTag', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminTagServiceClient.prototype.recv_getAdminTag = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminTagService_getAdminTag_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAdminTag failed: unknown result');
};

AdminTagServiceClient.prototype.getAdminTags = function (tag_ids, callback) {
  this._seqid = this.new_seqid();

  if (callback === undefined) {
    var _defer = Q.defer();

    this._reqs[this.seqid()] = function (error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };

    this.send_getAdminTags(tag_ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminTags(tag_ids);
  }
};

AdminTagServiceClient.prototype.send_getAdminTags = function (tag_ids) {
  var output = new this.pClass(this.output);
  var params = {
    tag_ids: tag_ids
  };
  var args = new AdminTagService_getAdminTags_args(params);

  try {
    output.writeMessageBegin('getAdminTags', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  } catch (e) {
    delete this._reqs[this.seqid()];

    if (typeof output.reset === 'function') {
      output.reset();
    }

    throw e;
  }
};

AdminTagServiceClient.prototype.recv_getAdminTags = function (input, mtype, rseqid) {
  var callback = this._reqs[rseqid] || function () {};

  delete this._reqs[rseqid];

  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }

  var result = new AdminTagService_getAdminTags_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }

  if (null !== result.systemException) {
    return callback(result.systemException);
  }

  if (null !== result.success) {
    return callback(null, result.success);
  }

  return callback('getAdminTags failed: unknown result');
};

var AdminTagServiceProcessor = exports.Processor = function (handler) {
  this._handler = handler;
};

AdminTagServiceProcessor.prototype.process = function (input, output) {
  var r = input.readMessageBegin();

  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};

AdminTagServiceProcessor.prototype.process_getAdminIdsFromTags = function (seqid, input, output) {
  var args = new AdminTagService_getAdminIdsFromTags_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAdminIdsFromTags.length === 1) {
    Q.fcall(this._handler.getAdminIdsFromTags.bind(this._handler), args.tag_ids).then(function (result) {
      var result_obj = new AdminTagService_getAdminIdsFromTags_result({
        success: result
      });
      output.writeMessageBegin("getAdminIdsFromTags", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminTagService_getAdminIdsFromTags_result(err);
        output.writeMessageBegin("getAdminIdsFromTags", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminIdsFromTags", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminIdsFromTags(args.tag_ids, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminTagService_getAdminIdsFromTags_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAdminIdsFromTags", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminIdsFromTags", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminTagServiceProcessor.prototype.process_getAdminTagMenus = function (seqid, input, output) {
  var args = new AdminTagService_getAdminTagMenus_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAdminTagMenus.length === 1) {
    Q.fcall(this._handler.getAdminTagMenus.bind(this._handler), args.tag_id).then(function (result) {
      var result_obj = new AdminTagService_getAdminTagMenus_result({
        success: result
      });
      output.writeMessageBegin("getAdminTagMenus", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminTagService_getAdminTagMenus_result(err);
        output.writeMessageBegin("getAdminTagMenus", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminTagMenus", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminTagMenus(args.tag_id, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminTagService_getAdminTagMenus_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAdminTagMenus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminTagMenus", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminTagServiceProcessor.prototype.process_getMappedAdminMenuHashes = function (seqid, input, output) {
  var args = new AdminTagService_getMappedAdminMenuHashes_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getMappedAdminMenuHashes.length === 2) {
    Q.fcall(this._handler.getMappedAdminMenuHashes.bind(this._handler), args.check_url, args.tag_id).then(function (result) {
      var result_obj = new AdminTagService_getMappedAdminMenuHashes_result({
        success: result
      });
      output.writeMessageBegin("getMappedAdminMenuHashes", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminTagService_getMappedAdminMenuHashes_result(err);
        output.writeMessageBegin("getMappedAdminMenuHashes", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMappedAdminMenuHashes", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getMappedAdminMenuHashes(args.check_url, args.tag_id, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminTagService_getMappedAdminMenuHashes_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getMappedAdminMenuHashes", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMappedAdminMenuHashes", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminTagServiceProcessor.prototype.process_getAdminTag = function (seqid, input, output) {
  var args = new AdminTagService_getAdminTag_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAdminTag.length === 1) {
    Q.fcall(this._handler.getAdminTag.bind(this._handler), args.tag_id).then(function (result) {
      var result_obj = new AdminTagService_getAdminTag_result({
        success: result
      });
      output.writeMessageBegin("getAdminTag", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminTagService_getAdminTag_result(err);
        output.writeMessageBegin("getAdminTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminTag", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminTag(args.tag_id, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminTagService_getAdminTag_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAdminTag", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminTag", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};

AdminTagServiceProcessor.prototype.process_getAdminTags = function (seqid, input, output) {
  var args = new AdminTagService_getAdminTags_args();
  args.read(input);
  input.readMessageEnd();

  if (this._handler.getAdminTags.length === 1) {
    Q.fcall(this._handler.getAdminTags.bind(this._handler), args.tag_ids).then(function (result) {
      var result_obj = new AdminTagService_getAdminTags_result({
        success: result
      });
      output.writeMessageBegin("getAdminTags", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;

      if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result = new AdminTagService_getAdminTags_result(err);
        output.writeMessageBegin("getAdminTags", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminTags", Thrift.MessageType.EXCEPTION, seqid);
      }

      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.getAdminTags(args.tag_ids, function (err, result) {
      var result_obj;

      if (err === null || typeof err === 'undefined' || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminTagService_getAdminTags_result(err !== null || typeof err === 'undefined' ? err : {
          success: result
        });
        output.writeMessageBegin("getAdminTags", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminTags", Thrift.MessageType.EXCEPTION, seqid);
      }

      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};