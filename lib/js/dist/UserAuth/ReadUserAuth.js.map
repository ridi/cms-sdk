{"version":3,"sources":["../../lib/UserAuth/ReadUserAuth.js"],"names":["client","userID","isDev","adminMenu","getMenuList","menus","getAllMenuAjax","ajaxMenus","ownMenuIds","map","m","id","getAllMenuIds","ownMenus","filter","url","trimUrlFragments","menu","menu_url","menu_deep","length","includes","forEach","ajax_array","findAjaxMenusForMenu","menusWithSameUrl","auths","getAuthFromUrl","auth","Set","topMenuFlags","push","i","is_show","readAuthorizedMenus","userId","adminTag","getAdminUserTag","fetchUserTags","filterMenusInUse","is_use","replace","menuId","allAjaxMenus","ajaxList","ajaxMenu","menu_id","ajax_auth","ajax_url","menuUrl","split","tags"],"mappings":"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","file":"ReadUserAuth.js","sourcesContent":["\n\nasync function readAuthorizedMenus(client, userID, isDev) {\n    const menus = await client.adminMenu.getMenuList();\n    const ajaxMenus = await client.adminMenu.getAllMenuAjax();\n\n    let ownMenuIds;\n    if (isDev) {\n        // Get all menus.\n        ownMenuIds = menus.map(m => m.id); \n    } else {\n        // Get menus only for the user.\n        ownMenuIds = await client.adminMenu.getAllMenuIds(userID);\n    }\n\n    // Filter own menus\n    let ownMenus = menus.filter(menu => {\n        const url = trimUrlFragments(menu.menu_url);\n        if (menu.menu_deep === 0 && url.length === 0) {\n            return true;\n        } else if (ownMenuIds.includes(menu.id)) {\n            return true;\n        }\n        return false;\n    });\n\n    // Fill additional attributes\n    ownMenus.forEach(menu => {\n        // Get ajaxs\n        menu.ajax_array = findAjaxMenusForMenu(menu.id, ajaxMenus);\n\n        // Get auths(hashes)\n        const url = trimUrlFragments(menu.menu_url);\n        const menusWithSameUrl = ownMenus.filter(m => {\n            return trimUrlFragments(m.menu_url) === url;\n        });\n        const auths = menusWithSameUrl\n            .map(m => getAuthFromUrl(m.menu_url))\n            .filter(auth => auth);\n        menu.auth = [...new Set(auths)] // Uniquify\n    });\n\n    // Hide empty top menu\n    let topMenuFlags = ownMenus.map(menu => {\n        return (menu.menu_deep === 0 && trimUrlFragments(menu.menu_url).length === 0) ? true : false;\n    });\n    topMenuFlags.push(1); // For tail check\n    for (let i = 0; i < topMenuFlags.length; ++i) {\n        if (topMenuFlags[i] && topMenuFlags[i + 1]) {\n            ownMenus[i].is_show = false;\n        }\n    }\n\n    return ownMenus;\n}\n\nfunction filterMenusInUse(menus) {\n    return menus.filter(menu => menu.is_use && menu.is_show);\n}\n\nasync function fetchUserTags(client, userId) {\n    return await client.adminTag.getAdminUserTag(userId);\n}\n\nfunction trimUrlFragments(url) {\n    return url.replace(/#.*/, '');\n}\n\nfunction findAjaxMenusForMenu(menuId, allAjaxMenus) {\n    let ajaxList = [];\n    //해당 menu 내의 ajax 리스트가 있는지 확인한다.\n    allAjaxMenus.forEach(function(ajaxMenu) {\n        if (ajaxMenu.menu_id === menuId) {\n            ajaxMenu.ajax_auth = getAuthFromUrl(ajaxMenu.ajax_url);\n            ajaxList.push(ajaxMenu);\n        }\n    });\n    return ajaxList;\n}\n\n// url에 #태그 확인하여 권한을 반환한다.\nfunction getAuthFromUrl(menuUrl) {\n    return menuUrl.split('#')[1];\n}\n\nexport default async function (client, userId, isDev) {\n    const auths = await readAuthorizedMenus(client, userId, isDev);\n    const tags = await fetchUserTags(client, userId)\n    const menus = filterMenusInUse(auths);\n    return {\n        auths, // menus with auth\n        menus, // menus without auth\n        tags,\n    }; \n}\n\n"]}