{"version":3,"sources":["../../lib/UserAuth/AuthCheck.js"],"names":["userAuth","method","checkUrl","hasHashAuth","allowedUrls","isAuthUrl","menuUrl","indexOf","url","replace","isAuthCorrect","hash","auth","Array","isArray","some","includes","h","hasUrl","auths","menu_url","ajax_array","hasAjax","ajax","ajax_url","ajax_auth"],"mappings":";;;;;;kBAmEe,UAASA,QAAT,EAAmBC,MAAnB,EAA2BC,QAA3B,EAAqC;AAChD,WAAOC,YAAYH,QAAZ,EAAsBC,MAAtB,EAA8BC,QAA9B,CAAP;AACH,C;;AApED,IAAME,cAAc,CAChB,gBADgB,EAEhB,KAFgB,EAET;AACP,UAHgB,EAIhB,SAJgB,EAKhB,GALgB,CAApB;;AAQA,SAASC,SAAT,CAAmBH,QAAnB,EAA6BI,OAA7B,EAAsC;AAClC,QAAIJ,SAASK,OAAT,CAAiB,QAAjB,KAA8B,CAAlC,EAAqC;AAAE;AACnC,eAAO,IAAP;AACH;AACD,QAAMC,MAAMF,QAAQG,OAAR,CAAgB,UAAhB,EAA4B,EAA5B,CAAZ;AACA,QAAID,OAAO,EAAP,IAAaN,SAASK,OAAT,CAAiBC,GAAjB,IAAwB,CAAzC,EAA4C;AAAE;AAC1C,eAAO,IAAP;AACH;AACD,WAAO,KAAP;AACH;;AAED;;;;;AAKA,SAASE,aAAT,CAAuBC,IAAvB,EAA6BC,IAA7B,EAAmC;AAC/B,QAAI,CAACD,IAAL,EAAW;AAAE;AACT,eAAO,IAAP;AACH,KAFD,MAEO,IAAIE,MAAMC,OAAN,CAAcH,IAAd,CAAJ,EAAyB;AAC5B,YAAIA,KAAKI,IAAL,CAAU;AAAA,mBAAKH,KAAKI,QAAL,CAAcC,CAAd,CAAL;AAAA,SAAV,CAAJ,EAAsC;AAClC,mBAAO,IAAP;AACH;AACJ,KAJM,MAIA,IAAIL,KAAKI,QAAL,CAAcL,IAAd,CAAJ,EAAyB;AAC5B,eAAO,IAAP;AACH;AACD,WAAO,KAAP;AACH;;AAED;;;AAGA,SAASR,WAAT,CAAqBH,QAArB,EAA+BW,IAA/B,EAAqCT,QAArC,EAA+C;AAC3C,QAAIE,YAAYY,QAAZ,CAAqBd,QAArB,CAAJ,EAAoC;AAChC,eAAO,IAAP;AACH;;AAED,QAAMgB,SAASlB,SAASmB,KAAT,CAAeJ,IAAf,CAAoB,gBAAQ;AACvC,eAAOV,UAAUH,QAAV,EAAoBU,KAAKQ,QAAzB,KACAV,cAAcC,IAAd,EAAoBC,KAAKA,IAAL,GAAYA,KAAKA,IAAjB,GAAwB,EAA5C,CADP;AAEH,KAHc,CAAf;AAIA,QAAIM,MAAJ,EAAY;AACR,eAAO,IAAP;AACH;;AAED,QAAIN,KAAKS,UAAT,EAAqB;AACjB,YAAMC,UAAUV,KAAKS,UAAL,CAAgBN,IAAhB,CAAqB,gBAAQ;AAAE;AAC3C,mBAAOV,UAAUH,QAAV,EAAoBqB,KAAKC,QAAzB,MACCd,cAAcC,IAAd,EAAoBC,KAAKA,IAAzB,KAAkCF,cAAcC,IAAd,EAAoBY,KAAKE,SAAzB,CADnC,CAAP;AAEH,SAHe,CAAhB;AAIA,YAAIH,OAAJ,EAAa;AACT,mBAAO,IAAP;AACH;AACJ;;AAED,WAAO,KAAP;AACH","file":"AuthCheck.js","sourcesContent":["\nconst allowedUrls = [\n    '/admin/book/pa',\n    '/me', // 본인 정보 수정\n    '/welcome',\n    '/logout',\n    '/',\n];\n\nfunction isAuthUrl(checkUrl, menuUrl) {\n    if (checkUrl.indexOf('/comm/') >= 0) { // /comm/으로 시작하는 url은 권한을 타지 않는다.\n        return true;\n    }\n    const url = menuUrl.replace(/(\\?|#).*/, '');\n    if (url != '' && checkUrl.indexOf(url) < 0) { // 현재 url과 권한 url이 같은지 비교\n        return true;\n    }\n    return false;\n}\n\n/**권한이 정확한지 확인\n * @param null hash\n * @param array auth\n * @return bool\n */\nfunction isAuthCorrect(hash, auth) {\n    if (!hash) { // hash가 없는 경우 (보기 권한)\n        return true;\n    } else if (Array.isArray(hash)) {\n        if (hash.some(h => auth.includes(h))) {\n            return true;\n        }\n    } else if (auth.includes(hash)) {\n        return true;\n    }\n    return false;\n}\n\n/**해당 URL의 Hash 권한이 있는지 검사한다.<br/>\n * @return bool\n */\nfunction hasHashAuth(userAuth, hash, checkUrl) {\n    if (allowedUrls.includes(checkUrl)) {\n        return true;\n    }\n\n    const hasUrl = userAuth.auths.some(auth => {\n        return isAuthUrl(checkUrl, auth.menu_url)\n            && isAuthCorrect(hash, auth.auth ? auth.auth : []);\n    });\n    if (hasUrl) {\n        return true;\n    }\n\n    if (auth.ajax_array) {\n        const hasAjax = auth.ajax_array.some(ajax => { // ajax_array 내의 key(ajax_url, ajax_auth)\n            return isAuthUrl(checkUrl, ajax.ajax_url)\n                && (isAuthCorrect(hash, auth.auth) || isAuthCorrect(hash, ajax.ajax_auth));\n        });\n        if (hasAjax) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\nexport default function(userAuth, method, checkUrl) {\n    return hasHashAuth(userAuth, method, checkUrl);\n}\n"]}