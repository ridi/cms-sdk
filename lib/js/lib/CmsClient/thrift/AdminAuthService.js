//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Errors_ttypes = require('./Errors_types');


var ttypes = require('./AdminAuth_types');
//HELPER FUNCTIONS AND STRUCTURES

var AdminAuthService_hasHashAuth_args = function(args) {
  this.hash = null;
  this.checkUrl = null;
  this.adminId = null;
  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
    if (args.checkUrl !== undefined && args.checkUrl !== null) {
      this.checkUrl = args.checkUrl;
    }
    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};
AdminAuthService_hasHashAuth_args.prototype = {};
AdminAuthService_hasHashAuth_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.checkUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.adminId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_hasHashAuth_args.prototype.write = function(output) {
  output.writeStructBegin('AdminAuthService_hasHashAuth_args');
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeString(this.hash);
    output.writeFieldEnd();
  }
  if (this.checkUrl !== null && this.checkUrl !== undefined) {
    output.writeFieldBegin('checkUrl', Thrift.Type.STRING, 2);
    output.writeString(this.checkUrl);
    output.writeFieldEnd();
  }
  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 3);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_hasHashAuth_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminAuthService_hasHashAuth_result.prototype = {};
AdminAuthService_hasHashAuth_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_hasHashAuth_result.prototype.write = function(output) {
  output.writeStructBegin('AdminAuthService_hasHashAuth_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getCurrentHashArray_args = function(args) {
  this.checkUrl = null;
  this.adminId = null;
  if (args) {
    if (args.checkUrl !== undefined && args.checkUrl !== null) {
      this.checkUrl = args.checkUrl;
    }
    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};
AdminAuthService_getCurrentHashArray_args.prototype = {};
AdminAuthService_getCurrentHashArray_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.checkUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.adminId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_getCurrentHashArray_args.prototype.write = function(output) {
  output.writeStructBegin('AdminAuthService_getCurrentHashArray_args');
  if (this.checkUrl !== null && this.checkUrl !== undefined) {
    output.writeFieldBegin('checkUrl', Thrift.Type.STRING, 1);
    output.writeString(this.checkUrl);
    output.writeFieldEnd();
  }
  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 2);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getCurrentHashArray_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminAuthService_getCurrentHashArray_result.prototype = {};
AdminAuthService_getCurrentHashArray_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString();
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_getCurrentHashArray_result.prototype.write = function(output) {
  output.writeStructBegin('AdminAuthService_getCurrentHashArray_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getAdminMenu_args = function(args) {
  this.adminId = null;
  if (args) {
    if (args.adminId !== undefined && args.adminId !== null) {
      this.adminId = args.adminId;
    }
  }
};
AdminAuthService_getAdminMenu_args.prototype = {};
AdminAuthService_getAdminMenu_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.adminId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_getAdminMenu_args.prototype.write = function(output) {
  output.writeStructBegin('AdminAuthService_getAdminMenu_args');
  if (this.adminId !== null && this.adminId !== undefined) {
    output.writeFieldBegin('adminId', Thrift.Type.STRING, 1);
    output.writeString(this.adminId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthService_getAdminMenu_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminAuthService_getAdminMenu_result.prototype = {};
AdminAuthService_getAdminMenu_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.AdminMenu();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminAuthService_getAdminMenu_result.prototype.write = function(output) {
  output.writeStructBegin('AdminAuthService_getAdminMenu_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminAuthServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
AdminAuthServiceClient.prototype = {};
AdminAuthServiceClient.prototype.seqid = function() { return this._seqid; };
AdminAuthServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
AdminAuthServiceClient.prototype.hasHashAuth = function(hash, checkUrl, adminId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_hasHashAuth(hash, checkUrl, adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_hasHashAuth(hash, checkUrl, adminId);
  }
};

AdminAuthServiceClient.prototype.send_hasHashAuth = function(hash, checkUrl, adminId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('hasHashAuth', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminAuthService_hasHashAuth_args();
  args.hash = hash;
  args.checkUrl = checkUrl;
  args.adminId = adminId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminAuthServiceClient.prototype.recv_hasHashAuth = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminAuthService_hasHashAuth_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('hasHashAuth failed: unknown result');
};
AdminAuthServiceClient.prototype.getCurrentHashArray = function(checkUrl, adminId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getCurrentHashArray(checkUrl, adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getCurrentHashArray(checkUrl, adminId);
  }
};

AdminAuthServiceClient.prototype.send_getCurrentHashArray = function(checkUrl, adminId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getCurrentHashArray', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminAuthService_getCurrentHashArray_args();
  args.checkUrl = checkUrl;
  args.adminId = adminId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminAuthServiceClient.prototype.recv_getCurrentHashArray = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminAuthService_getCurrentHashArray_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getCurrentHashArray failed: unknown result');
};
AdminAuthServiceClient.prototype.getAdminMenu = function(adminId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAdminMenu(adminId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminMenu(adminId);
  }
};

AdminAuthServiceClient.prototype.send_getAdminMenu = function(adminId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAdminMenu', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminAuthService_getAdminMenu_args();
  args.adminId = adminId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminAuthServiceClient.prototype.recv_getAdminMenu = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminAuthService_getAdminMenu_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAdminMenu failed: unknown result');
};
var AdminAuthServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
AdminAuthServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
AdminAuthServiceProcessor.prototype.process_hasHashAuth = function(seqid, input, output) {
  var args = new AdminAuthService_hasHashAuth_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.hasHashAuth.length === 3) {
    Q.fcall(this._handler.hasHashAuth, args.hash, args.checkUrl, args.adminId)
      .then(function(result) {
        var result_obj = new AdminAuthService_hasHashAuth_result({success: result});
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminAuthService_hasHashAuth_result(err);
          output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("hasHashAuth", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.hasHashAuth(args.hash, args.checkUrl, args.adminId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminAuthService_hasHashAuth_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("hasHashAuth", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminAuthServiceProcessor.prototype.process_getCurrentHashArray = function(seqid, input, output) {
  var args = new AdminAuthService_getCurrentHashArray_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getCurrentHashArray.length === 2) {
    Q.fcall(this._handler.getCurrentHashArray, args.checkUrl, args.adminId)
      .then(function(result) {
        var result_obj = new AdminAuthService_getCurrentHashArray_result({success: result});
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminAuthService_getCurrentHashArray_result(err);
          output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getCurrentHashArray(args.checkUrl, args.adminId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminAuthService_getCurrentHashArray_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getCurrentHashArray", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminAuthServiceProcessor.prototype.process_getAdminMenu = function(seqid, input, output) {
  var args = new AdminAuthService_getAdminMenu_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAdminMenu.length === 1) {
    Q.fcall(this._handler.getAdminMenu, args.adminId)
      .then(function(result) {
        var result_obj = new AdminAuthService_getAdminMenu_result({success: result});
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminAuthService_getAdminMenu_result(err);
          output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAdminMenu", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAdminMenu(args.adminId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminAuthService_getAdminMenu_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminMenu", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
