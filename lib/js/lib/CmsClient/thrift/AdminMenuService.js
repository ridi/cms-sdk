//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Errors_ttypes = require('./Errors_types');


var ttypes = require('./AdminMenu_types');
//HELPER FUNCTIONS AND STRUCTURES

var AdminMenuService_getMenuList_args = function(args) {
  this.isUse = null;
  if (args) {
    if (args.isUse !== undefined && args.isUse !== null) {
      this.isUse = args.isUse;
    }
  }
};
AdminMenuService_getMenuList_args.prototype = {};
AdminMenuService_getMenuList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BOOL) {
        this.isUse = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getMenuList_args.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getMenuList_args');
  if (this.isUse !== null && this.isUse !== undefined) {
    output.writeFieldBegin('isUse', Thrift.Type.BOOL, 1);
    output.writeBool(this.isUse);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getMenuList_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminMenuService_getMenuList_result.prototype = {};
AdminMenuService_getMenuList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.success = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.AdminMenu();
          elem6.read(input);
          this.success.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getMenuList_result.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getMenuList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter7 in this.success)
    {
      if (this.success.hasOwnProperty(iter7))
      {
        iter7 = this.success[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllMenuList_args = function(args) {
};
AdminMenuService_getAllMenuList_args.prototype = {};
AdminMenuService_getAllMenuList_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getAllMenuList_args.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getAllMenuList_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllMenuList_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminMenuService_getAllMenuList_result.prototype = {};
AdminMenuService_getAllMenuList_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.success = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.AdminMenu();
          elem14.read(input);
          this.success.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getAllMenuList_result.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getAllMenuList_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter15 in this.success)
    {
      if (this.success.hasOwnProperty(iter15))
      {
        iter15 = this.success[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllMenuAjax_args = function(args) {
};
AdminMenuService_getAllMenuAjax_args.prototype = {};
AdminMenuService_getAllMenuAjax_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getAllMenuAjax_args.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getAllMenuAjax_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllMenuAjax_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenuAjax]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminMenuService_getAllMenuAjax_result.prototype = {};
AdminMenuService_getAllMenuAjax_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.success = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.AdminMenuAjax();
          elem22.read(input);
          this.success.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getAllMenuAjax_result.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getAllMenuAjax_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter23 in this.success)
    {
      if (this.success.hasOwnProperty(iter23))
      {
        iter23 = this.success[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getMenus_args = function(args) {
  this.menuIds = null;
  if (args) {
    if (args.menuIds !== undefined && args.menuIds !== null) {
      this.menuIds = Thrift.copyList(args.menuIds, [null]);
    }
  }
};
AdminMenuService_getMenus_args.prototype = {};
AdminMenuService_getMenus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.menuIds = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readI32();
          this.menuIds.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getMenus_args.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getMenus_args');
  if (this.menuIds !== null && this.menuIds !== undefined) {
    output.writeFieldBegin('menuIds', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.I32, this.menuIds.length);
    for (var iter31 in this.menuIds)
    {
      if (this.menuIds.hasOwnProperty(iter31))
      {
        iter31 = this.menuIds[iter31];
        output.writeI32(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getMenus_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.AdminMenu]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminMenuService_getMenus_result.prototype = {};
AdminMenuService_getMenus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size32 = 0;
        var _rtmp336;
        this.success = [];
        var _etype35 = 0;
        _rtmp336 = input.readListBegin();
        _etype35 = _rtmp336.etype;
        _size32 = _rtmp336.size;
        for (var _i37 = 0; _i37 < _size32; ++_i37)
        {
          var elem38 = null;
          elem38 = new ttypes.AdminMenu();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getMenus_result.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getMenus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success)
    {
      if (this.success.hasOwnProperty(iter39))
      {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAdminIdsByMenuId_args = function(args) {
  this.menuId = null;
  if (args) {
    if (args.menuId !== undefined && args.menuId !== null) {
      this.menuId = args.menuId;
    }
  }
};
AdminMenuService_getAdminIdsByMenuId_args.prototype = {};
AdminMenuService_getAdminIdsByMenuId_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.menuId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getAdminIdsByMenuId_args.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getAdminIdsByMenuId_args');
  if (this.menuId !== null && this.menuId !== undefined) {
    output.writeFieldBegin('menuId', Thrift.Type.I32, 1);
    output.writeI32(this.menuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAdminIdsByMenuId_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminMenuService_getAdminIdsByMenuId_result.prototype = {};
AdminMenuService_getAdminIdsByMenuId_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size40 = 0;
        var _rtmp344;
        this.success = [];
        var _etype43 = 0;
        _rtmp344 = input.readListBegin();
        _etype43 = _rtmp344.etype;
        _size40 = _rtmp344.size;
        for (var _i45 = 0; _i45 < _size40; ++_i45)
        {
          var elem46 = null;
          elem46 = input.readString();
          this.success.push(elem46);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getAdminIdsByMenuId_result.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getAdminIdsByMenuId_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter47 in this.success)
    {
      if (this.success.hasOwnProperty(iter47))
      {
        iter47 = this.success[iter47];
        output.writeString(iter47);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllUserIds_args = function(args) {
  this.menuId = null;
  if (args) {
    if (args.menuId !== undefined && args.menuId !== null) {
      this.menuId = args.menuId;
    }
  }
};
AdminMenuService_getAllUserIds_args.prototype = {};
AdminMenuService_getAllUserIds_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.menuId = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getAllUserIds_args.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getAllUserIds_args');
  if (this.menuId !== null && this.menuId !== undefined) {
    output.writeFieldBegin('menuId', Thrift.Type.I32, 1);
    output.writeI32(this.menuId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuService_getAllUserIds_result = function(args) {
  this.success = null;
  this.userException = null;
  this.systemException = null;
  if (args instanceof Errors_ttypes.UserException) {
    this.userException = args;
    return;
  }
  if (args instanceof Errors_ttypes.SystemException) {
    this.systemException = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.userException !== undefined && args.userException !== null) {
      this.userException = args.userException;
    }
    if (args.systemException !== undefined && args.systemException !== null) {
      this.systemException = args.systemException;
    }
  }
};
AdminMenuService_getAllUserIds_result.prototype = {};
AdminMenuService_getAllUserIds_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        var _size48 = 0;
        var _rtmp352;
        this.success = [];
        var _etype51 = 0;
        _rtmp352 = input.readListBegin();
        _etype51 = _rtmp352.etype;
        _size48 = _rtmp352.size;
        for (var _i53 = 0; _i53 < _size48; ++_i53)
        {
          var elem54 = null;
          elem54 = input.readString();
          this.success.push(elem54);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.userException = new Errors_ttypes.UserException();
        this.userException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.systemException = new Errors_ttypes.SystemException();
        this.systemException.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminMenuService_getAllUserIds_result.prototype.write = function(output) {
  output.writeStructBegin('AdminMenuService_getAllUserIds_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter55 in this.success)
    {
      if (this.success.hasOwnProperty(iter55))
      {
        iter55 = this.success[iter55];
        output.writeString(iter55);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.userException !== null && this.userException !== undefined) {
    output.writeFieldBegin('userException', Thrift.Type.STRUCT, 1);
    this.userException.write(output);
    output.writeFieldEnd();
  }
  if (this.systemException !== null && this.systemException !== undefined) {
    output.writeFieldBegin('systemException', Thrift.Type.STRUCT, 2);
    this.systemException.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var AdminMenuServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
AdminMenuServiceClient.prototype = {};
AdminMenuServiceClient.prototype.seqid = function() { return this._seqid; };
AdminMenuServiceClient.prototype.new_seqid = function() { return this._seqid += 1; };
AdminMenuServiceClient.prototype.getMenuList = function(isUse, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMenuList(isUse);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMenuList(isUse);
  }
};

AdminMenuServiceClient.prototype.send_getMenuList = function(isUse) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMenuList', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminMenuService_getMenuList_args();
  args.isUse = isUse;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminMenuServiceClient.prototype.recv_getMenuList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminMenuService_getMenuList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMenuList failed: unknown result');
};
AdminMenuServiceClient.prototype.getAllMenuList = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllMenuList();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllMenuList();
  }
};

AdminMenuServiceClient.prototype.send_getAllMenuList = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllMenuList', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminMenuService_getAllMenuList_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminMenuServiceClient.prototype.recv_getAllMenuList = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminMenuService_getAllMenuList_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllMenuList failed: unknown result');
};
AdminMenuServiceClient.prototype.getAllMenuAjax = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllMenuAjax();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllMenuAjax();
  }
};

AdminMenuServiceClient.prototype.send_getAllMenuAjax = function() {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllMenuAjax', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminMenuService_getAllMenuAjax_args();
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminMenuServiceClient.prototype.recv_getAllMenuAjax = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminMenuService_getAllMenuAjax_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllMenuAjax failed: unknown result');
};
AdminMenuServiceClient.prototype.getMenus = function(menuIds, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getMenus(menuIds);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getMenus(menuIds);
  }
};

AdminMenuServiceClient.prototype.send_getMenus = function(menuIds) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getMenus', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminMenuService_getMenus_args();
  args.menuIds = menuIds;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminMenuServiceClient.prototype.recv_getMenus = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminMenuService_getMenus_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getMenus failed: unknown result');
};
AdminMenuServiceClient.prototype.getAdminIdsByMenuId = function(menuId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAdminIdsByMenuId(menuId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAdminIdsByMenuId(menuId);
  }
};

AdminMenuServiceClient.prototype.send_getAdminIdsByMenuId = function(menuId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAdminIdsByMenuId', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminMenuService_getAdminIdsByMenuId_args();
  args.menuId = menuId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminMenuServiceClient.prototype.recv_getAdminIdsByMenuId = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminMenuService_getAdminIdsByMenuId_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAdminIdsByMenuId failed: unknown result');
};
AdminMenuServiceClient.prototype.getAllUserIds = function(menuId, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_getAllUserIds(menuId);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_getAllUserIds(menuId);
  }
};

AdminMenuServiceClient.prototype.send_getAllUserIds = function(menuId) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('getAllUserIds', Thrift.MessageType.CALL, this.seqid());
  var args = new AdminMenuService_getAllUserIds_args();
  args.menuId = menuId;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminMenuServiceClient.prototype.recv_getAllUserIds = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminMenuService_getAllUserIds_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.userException) {
    return callback(result.userException);
  }
  if (null !== result.systemException) {
    return callback(result.systemException);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('getAllUserIds failed: unknown result');
};
var AdminMenuServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler;
}
;
AdminMenuServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}
;
AdminMenuServiceProcessor.prototype.process_getMenuList = function(seqid, input, output) {
  var args = new AdminMenuService_getMenuList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMenuList.length === 1) {
    Q.fcall(this._handler.getMenuList, args.isUse)
      .then(function(result) {
        var result_obj = new AdminMenuService_getMenuList_result({success: result});
        output.writeMessageBegin("getMenuList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminMenuService_getMenuList_result(err);
          output.writeMessageBegin("getMenuList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMenuList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMenuList(args.isUse, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getMenuList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getMenuList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMenuList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminMenuServiceProcessor.prototype.process_getAllMenuList = function(seqid, input, output) {
  var args = new AdminMenuService_getAllMenuList_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllMenuList.length === 0) {
    Q.fcall(this._handler.getAllMenuList)
      .then(function(result) {
        var result_obj = new AdminMenuService_getAllMenuList_result({success: result});
        output.writeMessageBegin("getAllMenuList", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminMenuService_getAllMenuList_result(err);
          output.writeMessageBegin("getAllMenuList", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllMenuList", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllMenuList(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getAllMenuList_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllMenuList", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMenuList", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminMenuServiceProcessor.prototype.process_getAllMenuAjax = function(seqid, input, output) {
  var args = new AdminMenuService_getAllMenuAjax_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllMenuAjax.length === 0) {
    Q.fcall(this._handler.getAllMenuAjax)
      .then(function(result) {
        var result_obj = new AdminMenuService_getAllMenuAjax_result({success: result});
        output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminMenuService_getAllMenuAjax_result(err);
          output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllMenuAjax(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getAllMenuAjax_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllMenuAjax", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminMenuServiceProcessor.prototype.process_getMenus = function(seqid, input, output) {
  var args = new AdminMenuService_getMenus_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getMenus.length === 1) {
    Q.fcall(this._handler.getMenus, args.menuIds)
      .then(function(result) {
        var result_obj = new AdminMenuService_getMenus_result({success: result});
        output.writeMessageBegin("getMenus", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminMenuService_getMenus_result(err);
          output.writeMessageBegin("getMenus", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getMenus", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getMenus(args.menuIds, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getMenus_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getMenus", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getMenus", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminMenuServiceProcessor.prototype.process_getAdminIdsByMenuId = function(seqid, input, output) {
  var args = new AdminMenuService_getAdminIdsByMenuId_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAdminIdsByMenuId.length === 1) {
    Q.fcall(this._handler.getAdminIdsByMenuId, args.menuId)
      .then(function(result) {
        var result_obj = new AdminMenuService_getAdminIdsByMenuId_result({success: result});
        output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminMenuService_getAdminIdsByMenuId_result(err);
          output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAdminIdsByMenuId(args.menuId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getAdminIdsByMenuId_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAdminIdsByMenuId", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
AdminMenuServiceProcessor.prototype.process_getAllUserIds = function(seqid, input, output) {
  var args = new AdminMenuService_getAllUserIds_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.getAllUserIds.length === 1) {
    Q.fcall(this._handler.getAllUserIds, args.menuId)
      .then(function(result) {
        var result_obj = new AdminMenuService_getAllUserIds_result({success: result});
        output.writeMessageBegin("getAllUserIds", Thrift.MessageType.REPLY, seqid);
        result_obj.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        var result;
        if (err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
          result = new AdminMenuService_getAllUserIds_result(err);
          output.writeMessageBegin("getAllUserIds", Thrift.MessageType.REPLY, seqid);
        } else {
          result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("getAllUserIds", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.getAllUserIds(args.menuId, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof Errors_ttypes.UserException || err instanceof Errors_ttypes.SystemException) {
        result_obj = new AdminMenuService_getAllUserIds_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("getAllUserIds", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("getAllUserIds", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
