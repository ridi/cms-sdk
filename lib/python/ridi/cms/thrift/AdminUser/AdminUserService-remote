#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# Autogenerated by Thrift Compiler (0.10.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:coding=utf-8
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from ridi.cms.thrift.AdminUser import AdminUserService
from ridi.cms.thrift.AdminUser.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  AdminUserCollection getAllAdminUserArray()')
    print('  AdminUser getUser(string userId)')
    print('   getAdminUserTag(string userId)')
    print('   getAdminUserMenu(string userId)')
    print('   getAllMenuIds(string userId)')
    print('  bool updateMyInfo(string name, string team, bool isUse, string passwd)')
    print('  bool updatePassword(string userId, string plainPassword)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = AdminUserService.Client(protocol)
transport.open()

if cmd == 'getAllAdminUserArray':
    if len(args) != 0:
        print('getAllAdminUserArray requires 0 args')
        sys.exit(1)
    pp.pprint(client.getAllAdminUserArray())

elif cmd == 'getUser':
    if len(args) != 1:
        print('getUser requires 1 args')
        sys.exit(1)
    pp.pprint(client.getUser(args[0],))

elif cmd == 'getAdminUserTag':
    if len(args) != 1:
        print('getAdminUserTag requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAdminUserTag(args[0],))

elif cmd == 'getAdminUserMenu':
    if len(args) != 1:
        print('getAdminUserMenu requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAdminUserMenu(args[0],))

elif cmd == 'getAllMenuIds':
    if len(args) != 1:
        print('getAllMenuIds requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllMenuIds(args[0],))

elif cmd == 'updateMyInfo':
    if len(args) != 4:
        print('updateMyInfo requires 4 args')
        sys.exit(1)
    pp.pprint(client.updateMyInfo(args[0], args[1], eval(args[2]), args[3],))

elif cmd == 'updatePassword':
    if len(args) != 2:
        print('updatePassword requires 2 args')
        sys.exit(1)
    pp.pprint(client.updatePassword(args[0], args[1],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
