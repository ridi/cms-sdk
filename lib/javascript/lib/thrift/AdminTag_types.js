//
// Autogenerated by Thrift Compiler (0.10.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var Errors_ttypes = require('./Errors_types');
var AdminMenu_ttypes = require('./AdminMenu_types');


var ttypes = module.exports = {};
var AdminTag = module.exports.AdminTag = function(args) {
  this.id = null;
  this.name = null;
  this.is_use = null;
  this.creator = null;
  this.reg_date = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.is_use !== undefined && args.is_use !== null) {
      this.is_use = args.is_use;
    }
    if (args.creator !== undefined && args.creator !== null) {
      this.creator = args.creator;
    }
    if (args.reg_date !== undefined && args.reg_date !== null) {
      this.reg_date = args.reg_date;
    }
  }
};
AdminTag.prototype = {};
AdminTag.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.id = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_use = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.creator = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.reg_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminTag.prototype.write = function(output) {
  output.writeStructBegin('AdminTag');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I32, 1);
    output.writeI32(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.is_use !== null && this.is_use !== undefined) {
    output.writeFieldBegin('is_use', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_use);
    output.writeFieldEnd();
  }
  if (this.creator !== null && this.creator !== undefined) {
    output.writeFieldBegin('creator', Thrift.Type.STRING, 4);
    output.writeString(this.creator);
    output.writeFieldEnd();
  }
  if (this.reg_date !== null && this.reg_date !== undefined) {
    output.writeFieldBegin('reg_date', Thrift.Type.STRING, 5);
    output.writeString(this.reg_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

